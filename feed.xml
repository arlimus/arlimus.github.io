<?xml version="1.0" encoding="utf-8" ?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Silversmith</title>
    <atom:link href="http://arlimus.github.io/feed.xml" rel="self" type="application/rss+xml"></atom:link>
    <link>http://arlimus.github.io</link>
    <description></description>
    <pubDate>Mon, 28 Jul 2014 02:00:00 +0200</pubDate>
    <generator>Wintersmith - https://github.com/jnordberg/wintersmith</generator>
    <language>en</language>
    <item>
      <title>SSH and locked users</title>
      <link>http://arlimus.github.io/articles/usepam/</link>
      <pubDate>Mon, 28 Jul 2014 02:00:00 +0200</pubDate>
      <guid isPermaLink="true">http://arlimus.github.io/articles/usepam/</guid>
      <author></author>
      <description>&lt;p&gt;After the first release of &lt;a href=&quot;https://github.com/TelekomLabs/chef-ssh-hardening&quot;&gt;hardening for SSH&lt;/a&gt; I sometimes ran into the issue, where I suddenly couldn’t log into an account anymore. Since hardening prohibits the use of passwords, the culprit isn’t found immediately. The client’s SSH key was authorized and there wasn’t an obvious reason why he shouldn’t be able to login.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;A quick solutions that comes to mind after throwing this question at Google, is to set&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;UsePAM yes&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It works as advertised. But why?&lt;/p&gt;
&lt;p&gt;If you look at &lt;code&gt;man sshd_config&lt;/code&gt; it will tell you, that:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;UsePAM    Enables the Pluggable Authentication Module interface.
          If set to ``yes&amp;#39;&amp;#39; this will enable PAM authentication
          using ChallengeResponseAuthentication and
          PasswordAuthentication in addition to PAM account and
          session module processing for all authentication types.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Both of these authentication types are disabled by hardening, so &lt;code&gt;UsePAM&lt;/code&gt; should remain off by default.&lt;/p&gt;
&lt;p&gt;However, if you enable this setting, there is another implication that follows: By default the system will not allow entry to any “locked” user. Once &lt;code&gt;UsePAM&lt;/code&gt; is enabled, even locked users can enter.&lt;/p&gt;
&lt;p&gt;Initially this looks wrong. A locked user should not be “locked out of the system”, right?&lt;/p&gt;
&lt;p&gt;Not quite so. In &lt;code&gt;usermod&lt;/code&gt; or &lt;code&gt;passwd&lt;/code&gt; terms, user locking results in:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Lock a user&amp;#39;s password. This puts a &amp;#39;!&amp;#39; in front of the 
encrypted password, effectively disabling the password. &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So in your &lt;code&gt;/etc/shadow&lt;/code&gt;, you will see (for user &lt;code&gt;kano&lt;/code&gt;):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;kano:!:16199:0:99999:7:::&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;!&lt;/code&gt; in the password hash is something that cannot be reached with any password input, since the user’s input is always hashed. In essence, a locked account is one that you cannot log into with a password. So it’s not about disabling the account, as the man-page shows further down:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Note: if you wish to lock the account (not only access
with a password), you should also set the EXPIRE_DATE to 1. &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Locked accounts don’t make much sense in the context of SSH with key-based login only. The obvious solution of &lt;code&gt;UsePAM&lt;/code&gt; set to &lt;code&gt;yes&lt;/code&gt; has the nice byproduct of interpreting locked accounts as ‘disabled’ instead of ‘password-locked’.&lt;/p&gt;
&lt;p&gt;For those that want to remain compliant without involving PAM in SSH, there’s still a way to get users with impossible password-login without account locking. Essentially, replace the &lt;code&gt;!&lt;/code&gt; in the password hash with any equivalent like &lt;code&gt;*&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;kano:*:16199:0:99999:7:::&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In normal login terms, this account is not locked, while making any password input fail. SSH in the default hardening configuration will still allow users with valid keys to log into the account. This way may be longer, but keeps a few settings at their intended purpose without aiming for a simple byproduct. Though if you prefer PAM, you still have the option of enabling it.&lt;/p&gt;
&lt;h3 id=&quot;configuring-accounts&quot;&gt;Configuring accounts&lt;/h3&gt;
&lt;p&gt;If you have &lt;code&gt;adduser&lt;/code&gt; installed, you gain control over this behavior when creating new users. This example demonstrates the difference:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; adduser --disabled-password kano

&amp;gt; grep kano /etc/shadow
kano:*:16280:7:60:7:::&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Versus:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; adduser --disabled-login kano

&amp;gt; grep kano /etc/shadow
kano:!:16280:7:60:7:::&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The former can log in without activating PAM in SSH, the latter can’t.&lt;/p&gt;
&lt;p&gt;A way to manage existing users is to use &lt;code&gt;usermod&lt;/code&gt; or &lt;code&gt;passwd&lt;/code&gt;. However, unlocking accounts that only have an &lt;code&gt;!&lt;/code&gt; in their hash field will result in an error:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; usermod -U kano
usermod: unlocking the user&amp;#39;s password would result in a passwordless account.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is annoying, but unfortunately correct: When locking an account, an &lt;code&gt;!&lt;/code&gt; is added in front of the password hash. Running unlock simply attempts to remove the &lt;code&gt;!&lt;/code&gt; and use the “old” password. Without a previous password, that doesn’t work.&lt;/p&gt;
&lt;p&gt;The alternative is to set an impossible password for the user:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; usermod -p &amp;quot;*&amp;quot; kano

&amp;gt; grep kano /etc/shadow
kano:*:16280:7:60:7:::&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will keep the user unlocked, while prohibiting password-based logins.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Gitlab 2.8 to 6.4</title>
      <link>http://arlimus.github.io/articles/gitlab.upgrade/</link>
      <pubDate>Fri, 10 Jan 2014 00:00:00 +0100</pubDate>
      <guid isPermaLink="true">http://arlimus.github.io/articles/gitlab.upgrade/</guid>
      <author></author>
      <description>&lt;p&gt;We’ve been happily running Gitlab for more than a year now, even though it was unmanaged and never upgraded. A few weeks ago I got my hands on it and decide to give upgrading a shot. “Can’t be that hard”. Fast-forward 3 weeks: I’m in the middle of an 1 hour automated upgrade procedure which is taking Gitlab from the stone age to the future.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;I’ll explain how we got there and what you should consider if you’re in a similar situation.&lt;/p&gt;
&lt;p&gt;First off: Gitlab was running on a physical machine productively which I couldn’t just take down or cause service downtimes. After all, it was Christmas, and that’s not something you want to find in a giftbox. All data had to be moved and I couldn’t clone the original system since it was running on bare metal.&lt;/p&gt;
&lt;h1 id=&quot;blind-copy&quot;&gt;Blind copy&lt;/h1&gt;
&lt;p&gt;I wanted to see if I could recreate Gitlab 2.8 with all of my old data on a new box. It’s certainly possible, but I soon realized it’s not as easy as it looks. Copying all files and migrating MySQL data wasn’t enough, as a persistent “500 Error” quickly told me. Since the goal isn’t necessarily to upgrade Gitlab itself but only to get all the data into a new Gitlab, I decided to go a different route.&lt;/p&gt;
&lt;h1 id=&quot;bootstrapping-gitlab-6.4&quot;&gt;Bootstrapping Gitlab 6.4&lt;/h1&gt;
&lt;p&gt;Instead of recreating Gitlab 2.8, I went for the version I wanted to end up with: Gitlab 6.4. I used &lt;a href=&quot;https://github.com/matschaffer/knife-solo&quot;&gt;knife-solo&lt;/a&gt; for deployment and the &lt;a href=&quot;https://github.com/ogom/cookbook-gitlab&quot;&gt;gitlab cookbook&lt;/a&gt;. Simply whip up a kitchen:&lt;/p&gt;
&lt;pre class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;kw&quot;&gt;knife&lt;/span&gt; solo init .&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and configure gitlab for the destination node. It’s well described in the &lt;a href=&quot;https://github.com/ogom/cookbook-gitlab/blob/master/README.md#usage&quot;&gt;readme&lt;/a&gt;. After all is done, deployment was easy:&lt;/p&gt;
&lt;pre class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;kw&quot;&gt;knife&lt;/span&gt; solo prepare git.mydomain.com
&lt;span class=&quot;kw&quot;&gt;knife&lt;/span&gt; solo cook git.mydomain.com --no-chef-check&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&quot;harsh-upgrade&quot;&gt;Harsh upgrade&lt;/h1&gt;
&lt;p&gt;So the ‘only’ issue was getting all data into shape. The brute-force way of doing this is taking all data, throwing it into Gitlab 6.4 and pressing the migrate button.&lt;/p&gt;
&lt;p&gt;Collecting old data was easy:&lt;/p&gt;
&lt;pre class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;co&quot;&gt;# get all mysql data&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;mysqldump&lt;/span&gt; -uUSER -pPASS gitlabhq_production &lt;span class=&quot;kw&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;gzip&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt; gitlab.sql-dump.gz

&lt;span class=&quot;co&quot;&gt;# get all repositories and keys&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;tar&lt;/span&gt; czf gitlab.repo-dump.tar.gz /home/git/repositories /home/git/.ssh/authorized_keys&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So was extracting it on the new machine:&lt;/p&gt;
&lt;pre class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;co&quot;&gt;# extract the repositories&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;cd&lt;/span&gt; /
&lt;span class=&quot;kw&quot;&gt;tar&lt;/span&gt; xf /root/gitlab.repo-dump.tar.gz

&lt;span class=&quot;co&quot;&gt;# inject the old db&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;# 1. create the structure in mysql&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;# 2. inject the data&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;create database gitlabhq_production;&amp;quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;mysql&lt;/span&gt; -u root -p&lt;span class=&quot;ot&quot;&gt;$MYSQL_PW&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;gunzip&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;lt;&lt;/span&gt; /root/gitlab.sql-dump.gz &lt;span class=&quot;kw&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;mysql&lt;/span&gt; -u root -p&lt;span class=&quot;ot&quot;&gt;$MYSQL_PW&lt;/span&gt; gitlabhq_production&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, how about about a DB migration?&lt;/p&gt;
&lt;pre class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;kw&quot;&gt;bundle&lt;/span&gt; exec rake db:migrate RAILS_ENV=production&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Errors, as expected. After straightening out some migration sections, the core ran through, but I was greeted with the familiar “500 Error” again.&lt;/p&gt;
&lt;h1 id=&quot;chain-of-fools&quot;&gt;Chain of fools&lt;/h1&gt;
&lt;p&gt;Remember the &lt;a href=&quot;http://www.youtube.com/watch?v=vPnehDhGa14&quot;&gt;chain of fools&lt;/a&gt;? Upgrading Windows from caveman to to the modern-age pain in the rear we know so well? Great stuff, let’s try that.&lt;/p&gt;
&lt;p&gt;Gitlab comes with &lt;a href=&quot;https://github.com/gitlabhq/gitlabhq/tree/master/doc/update&quot;&gt;great update instructions&lt;/a&gt;. Since we already have the latest version, we only have to worry about whatever transforms data and ignore everything that transforms Gitlab itself.&lt;/p&gt;
&lt;p&gt;The basic steps boil down to:&lt;/p&gt;
&lt;pre class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;kw&quot;&gt;git&lt;/span&gt; reset --hard HEAD
&lt;span class=&quot;kw&quot;&gt;git&lt;/span&gt; checkout -t origin/XXX-stable
&lt;span class=&quot;kw&quot;&gt;bundle&lt;/span&gt; install
&lt;span class=&quot;kw&quot;&gt;...&lt;/span&gt; do upgrade ...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After some cutting, the versions I ended up stepping through were: 3.1, 4.0, 4.1, 4.2, 5.0, 5.1, 5.4, 6.0, 6.2, and finally 6.4. It doesn’t just run through, however, it requries some work.&lt;/p&gt;
&lt;p&gt;The final script is found &lt;a href=&quot;https://gist.github.com/arlimus/8365108&quot;&gt;here&lt;/a&gt;. The adjustments required are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Older Gitlab versions need Ruby 1.9, newer need Ruby 2.0; Ruby must be adjusted during migration&lt;/li&gt;
&lt;li&gt;Gitlab 3.1 (and older) need a configuration file to run migrations; so mock one up on the fly&lt;/li&gt;
&lt;li&gt;Gitlab 6.0 transforms repos into a new structure; since we don’t have it running live, it will fail when trying to update the project. However, if we rescue this step, it will still correctly migrate files on the system. So a tiny patch is introduced to accomplish this.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Additionally, even after a successful migration, I still ended up with errors. As it turns out, we were already having database inconsistencies in our old gitlab after some users were deleted.&lt;/p&gt;
&lt;p&gt;So in addition to all these steps, I had to fix the database as well. First I had to upgrade projects whose user doesn’t exist anymore to have an owner:&lt;/p&gt;
&lt;pre class=&quot;mysql&quot;&gt;&lt;code&gt;# find all projects without a valid owner
select P.id from projects P left join users U on P.owner_id = U.id where U.id is null;

# set their owner to a valid id
update projects set owner_id = &amp;quot;1&amp;quot; where id = &amp;quot;...&amp;quot;;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Without this step these repos would not have been migrated into namespaces and thus would not have been available in new gitlab.&lt;/p&gt;
&lt;p&gt;Also, update all projects’ users to not include anyone who doesn’t exist anymore:&lt;/p&gt;
&lt;pre class=&quot;mysql&quot;&gt;&lt;code&gt;# find all users assigned to projects that don&amp;#39;t exist anymore
select P.id from users_projects P left join users U on P.user_id = U.id where U.id is null

# remove these users
delete from users_projects where id = &amp;quot;...&amp;quot;;&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&quot;results&quot;&gt;Results&lt;/h1&gt;
&lt;p&gt;The final script ran for 20min backup and 30min migration. It didn’t require and intervention. We found one more bug in the deployment keys after all was done, which required a quick manual fix. All in all, very successful! Thanks to everyone working on Gitlab for making this possible :)&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://gist.github.com/arlimus/8365108&quot;&gt;&lt;img id=&quot;gist-ribbon&quot; src=&quot;http://arlimus.github.io/css/gistbanner.png&quot; alt=&quot;Gist on GitHub&quot;&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Securing reverse SSH tunnels</title>
      <link>http://arlimus.github.io/articles/ssh.reverse.tunnel.security/</link>
      <pubDate>Tue, 05 Nov 2013 01:00:00 +0100</pubDate>
      <guid isPermaLink="true">http://arlimus.github.io/articles/ssh.reverse.tunnel.security/</guid>
      <author></author>
      <description>&lt;p&gt;SSH reverse tunnels are a quick way to expose client services on a server, if you want to control access to this service without additional firewall rules. In cloud scenarios it’s especially difficult to configure firewalls without reverting to DNS names, since IP addresses may change at any time. But there are some hidden traps when using reverse tunnels that you may not be aware of.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Let’s start with a simple usage example where one client wants to expose a local service to a server:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;client1&amp;gt; ssh -T -N -R 8001:localhost:80 server&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;http://arlimus.github.io/articles/ssh.reverse.tunnel.security/1.jpeg&quot; style=&quot;width: 100%; max-width: 1435px; margin-left: auto; margin-right: auto;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;As you can see, the server can now access the client’s service on port 8001.&lt;/p&gt;
&lt;p&gt;We used this trick for clients that have simple service APIs that only few servers should be able to reach. While we could have gone the route of configuring static IP addresses or overarching DNS names for all of these clients and securing it with firewall rules, we instead went with reverse tunnels. Now every client can control the access to his service, by creating a secure (and verified) connection to the server.&lt;/p&gt;
&lt;p&gt;Let’s add another client:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;client2&amp;gt; ssh -T -N -R 8002:localhost:80 server&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;http://arlimus.github.io/articles/ssh.reverse.tunnel.security/2.jpeg&quot; style=&quot;width: 100%; max-width: 1435px; margin-left: auto; margin-right: auto;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Now, let’s say that &lt;code&gt;client1&lt;/code&gt; belongs to one customer and &lt;code&gt;client2&lt;/code&gt; to another. What looks like directional pipes going from these clients to the central hub is by default actually a two-way road. That means, that without adjustments, you can potentially do this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;client2&amp;gt; ssh -T -N -L 81:localhost:8001 server&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;http://arlimus.github.io/articles/ssh.reverse.tunnel.security/3.jpeg&quot; style=&quot;width: 100%; max-width: 1435px; margin-left: auto; margin-right: auto;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;This may not be something you want, especially with backend systems. Many of these APIs aren’t hardened and offer a nice way to jump from one tenant or client to another, once you get an entry point. In a cloud scenario this is a disaster waiting to happen.&lt;/p&gt;
&lt;p&gt;Alas, there are a few ways to get around this issue.&lt;/p&gt;
&lt;p&gt;First, if you have OpenSSH at version &lt;a href=&quot;http://www.openssh.com/txt/release-6.2&quot;&gt;6.2&lt;/a&gt; or above you can add this configuration to your &lt;code&gt;sshd_config&lt;/code&gt; on the server:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;GatewayPorts no
AllowTcpForwarding remote&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This means that you can still create reverse tunnels to localhost, but forwarding tunnels can only be created to remote ports:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://arlimus.github.io/articles/ssh.reverse.tunnel.security/4.jpeg&quot; style=&quot;width: 100%; max-width: 1435px; margin-left: auto; margin-right: auto;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;If you want to play around with this configuration, have a look at this &lt;a href=&quot;https://gist.github.com/arlimus/7592670&quot;&gt;Vagrantfile&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Another option, which also works with older versions of OpenSSH, is to use whitelisting in the &lt;code&gt;.ssh/authorized_keys&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;permitopen=&amp;quot;255.255.255.255:9&amp;quot; ssh-rsa AAAAB3Nza.... user@client2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will prevent clients from opening forwarding ports to any address except the one specified. For clarification: &lt;code&gt;255.255.255.255&lt;/code&gt; is officially reserved for future use and &lt;a href=&quot;http://en.wikipedia.org/wiki/Discard_Protocol&quot;&gt;port 9&lt;/a&gt; is a fancy way of saying &lt;em&gt;“discard my input”&lt;/em&gt;. Kudos to Kurt Huwig for the whitelisting idea.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Wintersmith setup</title>
      <link>http://arlimus.github.io/articles/wintersmith.on.github/</link>
      <pubDate>Mon, 28 Oct 2013 01:00:00 +0100</pubDate>
      <guid isPermaLink="true">http://arlimus.github.io/articles/wintersmith.on.github/</guid>
      <author></author>
      <description>&lt;p&gt;There are some excellent tutorials for setting up Wintersmith out there. This is a summary for a quick and easy setup with Github Pages.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;
&lt;label&gt;Enter your GitHub username:&lt;/label&gt; &lt;input type=&quot;text&quot; ng-model=&quot;username&quot; placeholder=&quot;username&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Steps&lt;/strong&gt;&lt;/p&gt;
&lt;ol style=&quot;list-style-type: decimal&quot;&gt;
&lt;li&gt;&lt;p&gt;Create a GitHub repo for your user. As the name, type in: &lt;code&gt;{{username || 'username'}}.github.io&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Clone this repo to your local folder&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git clone git@github.com:{{username || 'username'}}/{{username || 'username'}}.github.io.git ~/blog
cd ~/blog&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Install wintersmith&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm install wintersmith -g&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Make sure GitHub doesn’t treat is as a Jekyll project and ignore node modules:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;touch .nojekyll
echo &amp;quot;node_modules&amp;quot; &amp;gt; .gitignore&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create your blog in folder &lt;code&gt;src/&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;wintersmith new src/
cd src/&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In this folder you will find the source of your blog. Edit the start of &lt;code&gt;config.json&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
  &amp;quot;output&amp;quot;: &amp;quot;./../&amp;quot;,
  &amp;quot;locals&amp;quot;: {
    &amp;quot;url&amp;quot;: &amp;quot;http://{{username || 'username'}}.github.io&amp;quot;,
    &amp;quot;name&amp;quot;: &amp;quot;Wintersmith meets {{username || 'username'}}&amp;quot;
    &amp;quot;owner&amp;quot;: &amp;quot;{{username || 'username'}}&amp;quot;
    &amp;quot;description&amp;quot;: &amp;quot;This is the blog of {{username || 'username'}}&amp;quot;
    //..&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Write articles, change templates, do whatever you like to it. To preview in &lt;a href=&quot;http://localhost:8080&quot;&gt;localhost:8080&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;wintersmith preview&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Once you are done, you can build it and push it online&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;wintersmith build

git add ../.
git commit -m &amp;quot;finished setup for first blog release&amp;quot;
git push -u origin master&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It may take GitHub a bit to update your page, but once it’s done you can visit it at &lt;a href=&quot;http://{{username || 'username'}}.github.io&quot;&gt;&lt;code&gt;http://{{username || 'username'}}.github.io&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>A kitchen for your server</title>
      <link>http://arlimus.github.io/articles/kitchen-server/</link>
      <pubDate>Sat, 26 Oct 2013 02:00:00 +0200</pubDate>
      <guid isPermaLink="true">http://arlimus.github.io/articles/kitchen-server/</guid>
      <author></author>
      <description>&lt;p&gt;I have a few bare servers lying around, pre-installed with Ubuntu, not integrated in any chef/puppte/saltstack workflow, with a lot of power ready to go. They are a perfect place for some labour-intensive vagrant boxes, which have recently been eating up my SSD. Due to the lack of bootstrap, I have found myself installing and configuring the same components one too many times.&lt;/p&gt;
&lt;p&gt;At this point I decided to revisit &lt;a href=&quot;https://github.com/matschaffer/knife-solo&quot;&gt;knife solo&lt;/a&gt; and take it out for a spin.&lt;span class=&quot;more&quot;&gt;&lt;/span&gt; The result is &lt;a href=&quot;https://github.com/arlimus/kitchen-server&quot;&gt;kitchen-server&lt;/a&gt;, an easy way to configure a server and make it your second home away from home.&lt;/p&gt;
&lt;p&gt;The only requirement to get started is &lt;a href=&quot;https://github.com/matschaffer/knife-solo&quot;&gt;knife-solo&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;kw&quot;&gt;gem&lt;/span&gt; install knife-solo&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s say my server is running at &lt;code&gt;192.168.200.204&lt;/code&gt;. I have the user &lt;code&gt;ubuntu&lt;/code&gt; preconfigured and ready to go (with ssh key on server). The basic setup is as easy as:&lt;/p&gt;
&lt;pre class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;kw&quot;&gt;git&lt;/span&gt; clone https://github.com/arlimus/kitchen-server
&lt;span class=&quot;kw&quot;&gt;cd&lt;/span&gt; kitchen-server

&lt;span class=&quot;kw&quot;&gt;./setup.sh&lt;/span&gt; ubuntu@192.168.200.204

&lt;span class=&quot;kw&quot;&gt;ssh&lt;/span&gt; knife@192.168.200.204&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I tend to use the extended version, to have zsh and git configured:&lt;/p&gt;
&lt;pre class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;kw&quot;&gt;./setup.sh&lt;/span&gt; ubuntu@192.168.200.204 ext

&lt;span class=&quot;kw&quot;&gt;ssh&lt;/span&gt; katana@192.168.200.204&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The kitchen itself is simply a configuration stack on top of many great cookbooks out there. The default configuration will get you started with vagrant quickly and easily. Feel free to fork and edit it as you like.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/arlimus/kitchen-server&quot;&gt;&lt;img id=&quot;fork-me-ribbon&quot; src=&quot;https://s3.amazonaws.com/github/ribbons/forkme_right_darkblue_121621.png&quot; alt=&quot;Fork me on GitHub&quot;&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Styling Jenkins</title>
      <link>http://arlimus.github.io/articles/theming.jenkins/</link>
      <pubDate>Thu, 24 Oct 2013 02:00:00 +0200</pubDate>
      <guid isPermaLink="true">http://arlimus.github.io/articles/theming.jenkins/</guid>
      <author></author>
      <description>&lt;p&gt;Jenkins has a nice theming plugin available. To use it you need to set up a stylesheet that is accessible to everyone user. I created a few themes found &lt;a href=&quot;https://github.com/arlimus/jenkins-style&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;The themes are found on github and hosted via github pages. They can easily be used in jenkins by copying the css of the theme you like into the configuration of the Simple Theme Plugin for Jenkins.&lt;/p&gt;
&lt;p&gt;My orange moon theme for Jenkins:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://arlimus.github.io/articles/theming.jenkins/orange.moon.jenkins.png&quot; style=&quot;max-width: 201px; margin-left: auto; margin-right: auto;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Link to the css:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;http://arlimus.github.io/jenkins-style/orange.moon.css&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The source is written in SASS and can be found &lt;a href=&quot;https://github.com/arlimus/jenkins-style/blob/master/css/orange.moon.scss&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I have also create a theme for my company’s Jenkins:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://arlimus.github.io/articles/theming.jenkins/magenta.jenkins.png&quot; style=&quot;max-width: 174px; margin-left: auto; margin-right: auto;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Link to the css:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;http://arlimus.github.io/jenkins-style/telekom.css&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The source is written in SASS and can be found &lt;a href=&quot;https://github.com/arlimus/jenkins-style/blob/master/css/telekom.scss&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/arlimus/jenkins-style&quot;&gt;&lt;img id=&quot;fork-me-ribbon&quot; src=&quot;https://s3.amazonaws.com/github/ribbons/forkme_right_darkblue_121621.png&quot; alt=&quot;Fork me on GitHub&quot;&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
  </channel>
</rss>
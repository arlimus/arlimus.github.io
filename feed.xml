<?xml version="1.0" encoding="utf-8" ?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Silversmith</title>
    <atom:link href="http://arlimus.github.io/feed.xml" rel="self" type="application/rss+xml"></atom:link>
    <link>http://arlimus.github.io</link>
    <description></description>
    <pubDate>Sat, 06 Sep 2014 02:00:00 +0200</pubDate>
    <generator>Wintersmith - https://github.com/jnordberg/wintersmith</generator>
    <language>en</language>
    <item>
      <title>Chef, Stop Failing</title>
      <link>http://arlimus.github.io/articles/chef.stop.failing/</link>
      <pubDate>Sat, 06 Sep 2014 02:00:00 +0200</pubDate>
      <guid isPermaLink="true">http://arlimus.github.io/articles/chef.stop.failing/</guid>
      <author></author>
      <description>&lt;p&gt;Sometimes your Chef run fails. Even though you’re greeted with bold red letters, you may still want the run to continue. Imagine, for example, bootstrapping nodes for the first time when no monitoring system is up yet. Or later on if monitoring fails. Your Chef run will break down due to missing components, even though you actually want it to complete, instead of failing halfway through.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://arlimus.github.io/articles/chef.stop.failing/error.png&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;full-control&quot;&gt;Full control&lt;/h2&gt;
&lt;p&gt;In case this happens to a resource you control, you have the wonderful &lt;code&gt;ignore_failure&lt;/code&gt; attribute to modify this behavior. Adding it to e.g. a service, will enable Chef to continue a run, even if this resource is failing.&lt;/p&gt;
&lt;pre class=&quot;sourceCode ruby&quot;&gt;&lt;code class=&quot;sourceCode ruby&quot;&gt;service &lt;span class=&quot;st&quot;&gt;&amp;quot;apache&amp;quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;do&lt;/span&gt;
  action &lt;span class=&quot;st&quot;&gt;:enable&lt;/span&gt;
  ignore_failure &lt;span class=&quot;dv&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Sometimes, however, a failure may happen to a resource you don’t control yourself. To me, this happened with the &lt;code&gt;sensu-chef&lt;/code&gt; cookbook. This opens up 2 options for you to choose.&lt;/p&gt;
&lt;h2 id=&quot;modify-a-foreign-cookbook&quot;&gt;#1 Modify a foreign cookbook&lt;/h2&gt;
&lt;p&gt;This is as simple as it gets: Clone/fork the repository of whatever cookbook you want to modify, alter the resource, and enjoy.&lt;/p&gt;
&lt;p&gt;For the &lt;code&gt;sensu-chef&lt;/code&gt; example, you can modify the &lt;code&gt;client_service&lt;/code&gt; recipe to look something like this:&lt;/p&gt;
&lt;pre class=&quot;sourceCode ruby&quot;&gt;&lt;code class=&quot;sourceCode ruby&quot;&gt;sensu_service &lt;span class=&quot;st&quot;&gt;&amp;quot;sensu-client&amp;quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;do&lt;/span&gt;
  init_style node.sensu.init_style
  action [&lt;span class=&quot;st&quot;&gt;:enable&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;:start&lt;/span&gt;]
  ignore_failure &lt;span class=&quot;dv&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(One more component is missing for sensu, which we will see at the end of article)&lt;/p&gt;
&lt;p&gt;This approach is very legible and clear. Instead of forking the repository you could have also added a modified “vendor” copy to your repo. Whichever suits you best.&lt;/p&gt;
&lt;p&gt;However, this approach also comes at a price. You now have to actively manage the repository and updates. This means monitoring upstream changes and merging them with your modification. Your patch also sits right inside these source files.&lt;/p&gt;
&lt;p&gt;This isn’t a bad thing, necessarily. In a productive environment you have to manage updates anyway.&lt;/p&gt;
&lt;h2 id=&quot;another-way&quot;&gt;#2 Another way&lt;/h2&gt;
&lt;p&gt;In our case, we took a slightly different approach. We have chosen a test-based approach, where we pull in update regularly and verify them, instead of reviewing every modified line of code all the time. Once approved, updates are pushed to the production environment and deployed.&lt;/p&gt;
&lt;p&gt;This approach works without altering the original source files or creating a clone. As you probably guessed, adding &lt;code&gt;ignore_failure&lt;/code&gt; wasn’t an option anymore. When you pull in a cookbook via &lt;code&gt;include_recipe&lt;/code&gt; or your run list, you have no field to add this attribute to.&lt;/p&gt;
&lt;pre class=&quot;sourceCode ruby&quot;&gt;&lt;code class=&quot;sourceCode ruby&quot;&gt;&lt;span class=&quot;co&quot;&gt;# this will eventually include sensu::client_service&lt;/span&gt;
include_recipe &lt;span class=&quot;st&quot;&gt;&amp;quot;monitor::default&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So how can we prevent the following from happening?&lt;/p&gt;
&lt;pre class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;  &lt;span class=&quot;kw&quot;&gt;*&lt;/span&gt; sensu_service[sensu-client] action start
    &lt;span class=&quot;kw&quot;&gt;*&lt;/span&gt; service[sensu-client] action start
      
      ================================================================================
      &lt;span class=&quot;kw&quot;&gt;Error&lt;/span&gt; executing action &lt;span class=&quot;kw&quot;&gt;`start`&lt;/span&gt; on resource &lt;span class=&quot;st&quot;&gt;&amp;#39;service[sensu-client]&amp;#39;&lt;/span&gt;
      ================================================================================
      
      &lt;span class=&quot;kw&quot;&gt;Mixlib&lt;/span&gt;::ShellOut::ShellCommandFailed&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The solution is surprisingly simple: Just add the following line to the recipe&lt;/p&gt;
&lt;pre class=&quot;sourceCode ruby&quot;&gt;&lt;code class=&quot;sourceCode ruby&quot;&gt;resources(&lt;span class=&quot;st&quot;&gt;&amp;#39;sensu_service[sensu-client]&amp;#39;&lt;/span&gt;).ignore_failure(&lt;span class=&quot;dv&quot;&gt;true&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;resources&lt;/code&gt; call is a shortcut to search for a resource within the run context:&lt;/p&gt;
&lt;pre class=&quot;sourceCode ruby&quot;&gt;&lt;code class=&quot;sourceCode ruby&quot;&gt;&lt;span class=&quot;co&quot;&gt;# http://rubydoc.info/gems/chef/11.4.4/Chef/Recipe#resources-instance_method&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; resources(*args)
  run_context.resource_collection.find(*args)
&lt;span class=&quot;kw&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As the argument, you can add the resource string you see in the error message. Here, I have chosen the parent resource &lt;code&gt;sensu_service[sensu-client]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;As a small downside, this call will fail if the resource can’t be found. Since we want to prevent failures, a better option is to add a library function instead:&lt;/p&gt;
&lt;pre class=&quot;sourceCode ruby&quot;&gt;&lt;code class=&quot;sourceCode ruby&quot;&gt;&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Chef&lt;/span&gt;::&lt;span class=&quot;dt&quot;&gt;Recipe&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; ignore_failure lookup
    res = resources(lookup)
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; res.nil?
      &lt;span class=&quot;dt&quot;&gt;Chef&lt;/span&gt;::&lt;span class=&quot;dt&quot;&gt;Log&lt;/span&gt;.warn(&lt;span class=&quot;st&quot;&gt;&amp;quot;Can&amp;#39;t find resource to ignore: &lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;#{&lt;/span&gt;lookup&lt;span class=&quot;ot&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;&lt;/span&gt;)
    &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;Chef&lt;/span&gt;::&lt;span class=&quot;dt&quot;&gt;Log&lt;/span&gt;.info(&lt;span class=&quot;st&quot;&gt;&amp;quot;Ignore failure for resource: &lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;#{&lt;/span&gt;lookup&lt;span class=&quot;ot&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;&lt;/span&gt;)
      res.ignore_failure(&lt;span class=&quot;dv&quot;&gt;true&lt;/span&gt;)  
    &lt;span class=&quot;kw&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Which you can now use in your recipe:&lt;/p&gt;
&lt;pre class=&quot;sourceCode ruby&quot;&gt;&lt;code class=&quot;sourceCode ruby&quot;&gt;ignore_failure &lt;span class=&quot;st&quot;&gt;&amp;#39;sensu_service[sensu-client]&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;
&lt;p&gt;Chef isolated your components into wonderful cookbooks and recipes. In some rare border cases, you may find yourself wishing to break this idyllic system and to alter some small behavior.&lt;/p&gt;
&lt;p&gt;You have the option to either clone and modify the code directly, thus preserving each compartment, or change its behavior with a few calls from the outside. Both methods have their merits and much depends on the style you and and your team prefer to use.&lt;/p&gt;
&lt;h2 id=&quot;one-more-thing&quot;&gt;One more thing&lt;/h2&gt;
&lt;p&gt;There is some cases, where resources are dynamically created during the Chef run, after you have long issued your &lt;code&gt;ignore_failure&lt;/code&gt; call. This usually happens inside a &lt;code&gt;ruby_block&lt;/code&gt;, which is interpreted during resource execution. Your &lt;code&gt;ignore_failure&lt;/code&gt; call happens too early in the run, for the resource to exist, and thus won’t have any effect.&lt;/p&gt;
&lt;p&gt;This is also true for my &lt;code&gt;service[sensu-client]&lt;/code&gt; example. In this special case, the resource is created by a LWRP and later triggered by a ruby block, which you can easily hijack to alter its behavior.&lt;/p&gt;
&lt;p&gt;The complete code block to stop both failures is:&lt;/p&gt;
&lt;pre class=&quot;sourceCode ruby&quot;&gt;&lt;code class=&quot;sourceCode ruby&quot;&gt;ignore_failure &lt;span class=&quot;st&quot;&gt;&amp;#39;sensu_service[sensu-client]&amp;#39;&lt;/span&gt;

resources(&lt;span class=&quot;st&quot;&gt;&amp;quot;ruby_block[sensu_service_trigger]&amp;quot;&lt;/span&gt;).block &lt;span class=&quot;kw&quot;&gt;do&lt;/span&gt;
  ignore_failure &lt;span class=&quot;st&quot;&gt;&amp;#39;service[sensu-client]&amp;#39;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    <item>
      <title>Librarian and R10K</title>
      <link>http://arlimus.github.iohttp://arlimus.github.io/slides/librarian.and.r10k/#/</link>
      <pubDate></pubDate>
      <guid isPermaLink="true">http://arlimus.github.iohttp://arlimus.github.io/slides/librarian.and.r10k/#/</guid>
      <author></author>
      <description></description>
    </item>
    <item>
      <title>Custom Resource Types in Serverspec</title>
      <link>http://arlimus.github.io/articles/custom.resource.types.in.serverspec/</link>
      <pubDate>Sat, 30  Aug 2014 02:00:00 +0200</pubDate>
      <guid isPermaLink="true">http://arlimus.github.io/articles/custom.resource.types.in.serverspec/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;a href=&quot;http://serverspec.org&quot;&gt;Serverspec&lt;/a&gt; comes ready to go with many useful &lt;a href=&quot;http://serverspec.org/resource_types.html&quot;&gt;resource types&lt;/a&gt;. Sometimes, however, you may find yourself in a situation, where you need something special. Let’s see how it’s done.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&quot;not-enough&quot;&gt;Not enough&lt;/h2&gt;
&lt;p&gt;This happened to me while initially writing tests for &lt;a href=&quot;https://github.com/TelekomLabs/tests-nginx-hardening&quot;&gt;Nginx hardening&lt;/a&gt;. For all configuration checks, these tests looked for values inside &lt;code&gt;/etc/nginx/nginx.conf&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;sourceCode ruby&quot;&gt;&lt;code class=&quot;sourceCode ruby&quot;&gt;describe file( nginx_conf ) &lt;span class=&quot;kw&quot;&gt;do&lt;/span&gt;
  its(&lt;span class=&quot;st&quot;&gt;:content&lt;/span&gt;) { should match(&lt;span class=&quot;ot&quot;&gt;/^\s*server_tokens off;$/&lt;/span&gt;) }
&lt;span class=&quot;kw&quot;&gt;end&lt;/span&gt;

...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With that out of the way, I started the implementation in Chef. Since hardening is designed as an overlay on top of existing cookbooks, we chose &lt;code&gt;miketheman/nginx&lt;/code&gt; as the base provider.&lt;/p&gt;
&lt;p&gt;This led to a crucial discovery: Some values were configured inside &lt;code&gt;nginx.conf&lt;/code&gt;, while others were just not available (as seen in the &lt;a href=&quot;https://github.com/miketheman/nginx/blob/master/templates/default/nginx.conf.erb&quot;&gt;template&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;For Nginx, an easy and clean solution is to create a configuration file inside &lt;code&gt;conf.d&lt;/code&gt; and add all remaining values there. This leads to a split in configuration parameters between both configuration files, which must be reflected serverspec.&lt;/p&gt;
&lt;p&gt;Some tests now didn’t target &lt;code&gt;nginx.conf&lt;/code&gt; anymore, but the hardening configuration &lt;code&gt;conf.d/90.hardening.conf&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;sourceCode ruby&quot;&gt;&lt;code class=&quot;sourceCode ruby&quot;&gt;describe file( hardening_conf ) &lt;span class=&quot;kw&quot;&gt;do&lt;/span&gt;
  its(&lt;span class=&quot;st&quot;&gt;:content&lt;/span&gt;) { should match(&lt;span class=&quot;ot&quot;&gt;/^\s*more_clear_headers &amp;#39;Server&amp;#39;;$/&lt;/span&gt;) }
&lt;span class=&quot;kw&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The obvious issue with this decision popped up during the implementation in Puppet. Here, a different provider for nginx was used: &lt;code&gt;jfryman/nginx&lt;/code&gt;. Its &lt;code&gt;nginx.conf&lt;/code&gt; had other values configured than the Chef equivalent (as seen in the &lt;a href=&quot;https://github.com/jfryman/puppet-nginx/blob/master/templates/conf.d/nginx.conf.erb&quot;&gt;template&lt;/a&gt;). Unfortunately, the serverspec tests were expecting parameters in &lt;code&gt;nginx.conf&lt;/code&gt;, that had now moved to &lt;code&gt;conf.d&lt;/code&gt;. There was no way to check both with the same set of tests anymore.&lt;/p&gt;
&lt;p&gt;The ideal solution would have been to move all configuration values to the custom configuration file in &lt;code&gt;conf.d&lt;/code&gt;. However, this would have broken the overlay design. A user may still configure a parameter that ends up in both &lt;code&gt;nginx.conf&lt;/code&gt; and &lt;code&gt;conf.d&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;extending-serverspec&quot;&gt;Extending Serverspec&lt;/h2&gt;
&lt;p&gt;I needed a resource provider, that could check nginx configuration in multiple files at once:&lt;/p&gt;
&lt;pre class=&quot;sourceCode ruby&quot;&gt;&lt;code class=&quot;sourceCode ruby&quot;&gt;conf_paths = [ nginx_conf, hardening_conf ]

describe multi_file( conf_paths )
  its(&lt;span class=&quot;st&quot;&gt;:content&lt;/span&gt;) { should match(&lt;span class=&quot;ot&quot;&gt;/^\s*more_clear_headers &amp;#39;Server&amp;#39;;$/&lt;/span&gt;) }
&lt;span class=&quot;kw&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;First, add a new file for the provider. Your directory structure may look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.
└── serverspec
    ├── nginx_spec.rb
    ├── spec_helper.rb
    └── type
        └── multi_file.rb&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The type provider extends &lt;code&gt;Serverspec::Type&lt;/code&gt; by adding a method &lt;code&gt;multi_file&lt;/code&gt;. This is the method you call when writing your tests. Additionally, we create a class that holds the object which is tested. This class includes methods that expose values for matchers (e.g. &lt;code&gt;:content&lt;/code&gt;) and must be extended from &lt;code&gt;Serverspec::Type::Base&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&quot;sourceCode ruby&quot;&gt;&lt;code class=&quot;sourceCode ruby&quot;&gt;&lt;span class=&quot;kw&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Serverspec&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Type&lt;/span&gt;
     
    &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;MultiFile&lt;/span&gt; &amp;lt; &lt;span class=&quot;dt&quot;&gt;Base&lt;/span&gt;
  
      &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; initialize(paths)
        &lt;span class=&quot;ot&quot;&gt;@paths&lt;/span&gt; = paths
      &lt;span class=&quot;kw&quot;&gt;end&lt;/span&gt;
     
      &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; content
        &lt;span class=&quot;ot&quot;&gt;@paths&lt;/span&gt;.map{|x| ::&lt;span class=&quot;dt&quot;&gt;File&lt;/span&gt;.read x }.join(&lt;span class=&quot;st&quot;&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;)
      &lt;span class=&quot;kw&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; multi_file(paths)
      &lt;span class=&quot;dt&quot;&gt;MultiFile&lt;/span&gt;.new(paths)
    &lt;span class=&quot;kw&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;end&lt;/span&gt;

include &lt;span class=&quot;dt&quot;&gt;Serverspec&lt;/span&gt;::&lt;span class=&quot;dt&quot;&gt;Type&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Additionally, you can create endpoints for checks like:&lt;/p&gt;
&lt;pre class=&quot;sourceCode ruby&quot;&gt;&lt;code class=&quot;sourceCode ruby&quot;&gt;describe multi_file( conf_paths )
  it { should be_valid }
&lt;span class=&quot;kw&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Simply add a method &lt;code&gt;valid?&lt;/code&gt; to your object:&lt;/p&gt;
&lt;pre class=&quot;sourceCode ruby&quot;&gt;&lt;code class=&quot;sourceCode ruby&quot;&gt;    &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;MultiFile&lt;/span&gt; &amp;lt; &lt;span class=&quot;dt&quot;&gt;Base&lt;/span&gt;

      ...

      &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; valid?
        &lt;span class=&quot;co&quot;&gt;# check if the files are valid&lt;/span&gt;
      &lt;span class=&quot;kw&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A great source of inspiration is serverspec’s own &lt;a href=&quot;https://github.com/serverspec/serverspec/tree/master/lib/serverspec/type&quot;&gt;collection of types&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Finally, don’t forget to include this file, preferably in your &lt;code&gt;spec_helper.rb&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;sourceCode ruby&quot;&gt;&lt;code class=&quot;sourceCode ruby&quot;&gt;...

&lt;span class=&quot;co&quot;&gt;# additional requirements&lt;/span&gt;
require &lt;span class=&quot;st&quot;&gt;&amp;#39;type/multi_file&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, &lt;code&gt;:content&lt;/code&gt; provides the content of all files combined. Using the existing matchers, it’s easy to write the tests.&lt;/p&gt;
&lt;h1 id=&quot;final-thoughts&quot;&gt;Final thoughts&lt;/h1&gt;
&lt;p&gt;Our serverspec tests in the hardening project are not limited to just verifying Chef and Puppet runs. We also want them to check if a system has a valid configuration (compliance checks). Without custom resource types, this is not possible, as you sometimes cannot expect a system to be configured in a certain way. This includes configurations for Apache, MySQL, or even Sysctl, which all feature a directory structure where additional configuration files are applied.&lt;/p&gt;
&lt;p&gt;It’s important to remember what these resource types provide, and what they don’t cover. Stick to rspec and &lt;a href=&quot;https://github.com/serverspec/serverspec/tree/master/lib/serverspec/matchers&quot;&gt;serverspec matchers&lt;/a&gt; for checking values themselves. Use resource types to get your values exposed to these matchers.&lt;/p&gt;
&lt;p&gt;Happy testing!&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Scala and Logstash</title>
      <link>http://arlimus.github.io/articles/scala.logging/</link>
      <pubDate>Sun, 24  Aug 2014 02:00:00 +0200</pubDate>
      <guid isPermaLink="true">http://arlimus.github.io/articles/scala.logging/</guid>
      <author></author>
      <description>&lt;p&gt;Getting your application to write log info is easy. Just grab a small logging framework that writes to stdout or a logfile. They are available in all major languages, well-document, and easy to get going.&lt;/p&gt;
&lt;p&gt;During the last years, logstash and friends have taken root in our environments and made our lives much easier.&lt;/p&gt;
&lt;p&gt;With this in mind, I though it must be simple enough to get my scala applications equipped with some nice log-stashing. Here’s where I landed.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&quot;logstash&quot;&gt;Logstash&lt;/h2&gt;
&lt;p&gt;First things first. You can run your log-stashing experiments against a central or remote logstash server, OR you can just quickly spin up a tiny logstash to get going locally. Here’s how:&lt;/p&gt;
&lt;pre class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;kw&quot;&gt;curl&lt;/span&gt; -O https://download.elasticsearch.org/logstash/logstash/logstash-1.4.2.tar.gz
&lt;span class=&quot;kw&quot;&gt;tar&lt;/span&gt; xf logstash-1.4.2.tar.gz
&lt;span class=&quot;kw&quot;&gt;cd&lt;/span&gt; logstash-1.4.2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ìf you want to see how it looks like with good input:&lt;/p&gt;
&lt;pre class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;kw&quot;&gt;bin/logstash&lt;/span&gt; -e &lt;span class=&quot;st&quot;&gt;&amp;#39;input { stdin { } } output { stdout { codec =&amp;gt; json } }&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now type anything and hit return. It will respond with a JSON object (which is an easy way to see what logstash expects as valid input).&lt;/p&gt;
&lt;p&gt;Now, let’s say you want to test your application against the default logstash tcp endpoint and see whether it works. Set it up locally:&lt;/p&gt;
&lt;pre class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;kw&quot;&gt;bin/logstash&lt;/span&gt; -e &lt;span class=&quot;st&quot;&gt;&amp;#39;input { tcp { port =&amp;gt; 9998 } } output { stdout { codec =&amp;gt; json } }&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once everything is working, you can use it as a forwarder to your upstream elasticsearch like this:&lt;/p&gt;
&lt;pre class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;kw&quot;&gt;bin/logstash&lt;/span&gt; -e &lt;span class=&quot;st&quot;&gt;&amp;#39;input { tcp { port =&amp;gt; 9998 } } output { stdout { codec =&amp;gt; json } elasticsearch_http { host =&amp;gt; &amp;quot;es.domain.com&amp;quot; port =&amp;gt; 12345 } }&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;logback&quot;&gt;Logback&lt;/h2&gt;
&lt;p&gt;Searching for Scala logging I came across &lt;a href=&quot;https://github.com/typesafehub/scala-logging&quot;&gt;scala-logging&lt;/a&gt;. It works on top of &lt;a href=&quot;http://www.slf4j.org/&quot;&gt;SLF4J&lt;/a&gt; backends. Knowing &lt;a href=&quot;http://logging.apache.org/log4j&quot;&gt;Log4J&lt;/a&gt;, I headed off to mix &lt;a href=&quot;http://arlimus.github.io/articles/scala.logging/logback.qos.ch&quot;&gt;logback&lt;/a&gt; into this framework cocktail.&lt;/p&gt;
&lt;p&gt;It’s simple enough to get going: Add a few dependencies to your &lt;code&gt;build.sbt&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&quot;sourceCode scala&quot;&gt;&lt;code class=&quot;sourceCode scala&quot;&gt;libraryDependencies += &lt;span class=&quot;st&quot;&gt;&amp;quot;ch.qos.logback&amp;quot;&lt;/span&gt; % &lt;span class=&quot;st&quot;&gt;&amp;quot;logback-classic&amp;quot;&lt;/span&gt; % &lt;span class=&quot;st&quot;&gt;&amp;quot;1.1.2&amp;quot;&lt;/span&gt;

libraryDependencies += &lt;span class=&quot;st&quot;&gt;&amp;quot;com.typesafe.scala-logging&amp;quot;&lt;/span&gt; %% &lt;span class=&quot;st&quot;&gt;&amp;quot;scala-logging&amp;quot;&lt;/span&gt; % &lt;span class=&quot;st&quot;&gt;&amp;quot;3.1.0&amp;quot;&lt;/span&gt;

libraryDependencies += &lt;span class=&quot;st&quot;&gt;&amp;quot;net.logstash.logback&amp;quot;&lt;/span&gt; % &lt;span class=&quot;st&quot;&gt;&amp;quot;logstash-logback-encoder&amp;quot;&lt;/span&gt; % &lt;span class=&quot;st&quot;&gt;&amp;quot;3.0&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then add a log object:&lt;/p&gt;
&lt;pre class=&quot;sourceCode scala&quot;&gt;&lt;code class=&quot;sourceCode scala&quot;&gt;&lt;span class=&quot;kw&quot;&gt;import&lt;/span&gt; com.&lt;span class=&quot;fu&quot;&gt;typesafe&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;scalalogging&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;Logger&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import&lt;/span&gt; org.&lt;span class=&quot;fu&quot;&gt;slf4j&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;LoggerFactory&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;val&lt;/span&gt; Log = Logger(LoggerFactory.&lt;span class=&quot;fu&quot;&gt;getLogger&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;pdfmangler&amp;quot;&lt;/span&gt;))
Log.&lt;span class=&quot;fu&quot;&gt;info&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;Hello World&amp;quot;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, add a configuration file in &lt;code&gt;src/main/resources/logback.xml&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;&lt;code class=&quot;sourceCode xml&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;configuration&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;appender&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;LOGSTASH&amp;quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;net.logstash.logback.appender.LogstashTcpSocketAppender&amp;quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;remoteHost&amp;gt;&lt;/span&gt;HOST&lt;span class=&quot;kw&quot;&gt;&amp;lt;/remoteHost&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;port&amp;gt;&lt;/span&gt;9998&lt;span class=&quot;kw&quot;&gt;&amp;lt;/port&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/appender&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;&amp;lt;root&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; level=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;DEBUG&amp;quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;appender-ref&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; ref=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;LOGSTASH&amp;quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/root&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Simple.&lt;/p&gt;
&lt;p&gt;Or so I though.&lt;/p&gt;
&lt;p&gt;Running this against my local logstash, I soon realized that it doesn’t seem to work with the current release. It will eventually get updated, but there are a few alternatives you can use.&lt;/p&gt;
&lt;p&gt;One of them is to take the simple route via syslog. Add it to your &lt;code&gt;logback.xml&lt;/code&gt; (moved to port 11514 for local testing as non-root):&lt;/p&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;&lt;code class=&quot;sourceCode xml&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;configuration&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;appender&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;SYSLOG&amp;quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;ch.qos.logback.classic.net.SyslogAppender&amp;quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;syslogHost&amp;gt;&lt;/span&gt;localhost&lt;span class=&quot;kw&quot;&gt;&amp;lt;/syslogHost&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;port&amp;gt;&lt;/span&gt;11514&lt;span class=&quot;kw&quot;&gt;&amp;lt;/port&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;facility&amp;gt;&lt;/span&gt;AUTH&lt;span class=&quot;kw&quot;&gt;&amp;lt;/facility&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;suffixPattern&amp;gt;&lt;/span&gt;[%thread] %logger %msg&lt;span class=&quot;kw&quot;&gt;&amp;lt;/suffixPattern&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/appender&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;&amp;lt;root&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; level=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;DEBUG&amp;quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;appender-ref&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; ref=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;LOGSTASH&amp;quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/root&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Start your testing server and see it fly:&lt;/p&gt;
&lt;pre class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;kw&quot;&gt;bin/logstash&lt;/span&gt; -e &lt;span class=&quot;st&quot;&gt;&amp;#39;input { syslog { port =&amp;gt; 11514 } } output { stdout { codec =&amp;gt; json } }&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s add one tricky aspect: You don’t want to run syslog on UDP, but TCP instead. “There must be a parameter for that…” Unfortunately there isn’t. Unless you’re creating your own method or switch to Log4J2 (see below), there is no easy way to get this in logback.&lt;/p&gt;
&lt;p&gt;But there are a few simple workarounds. One if &lt;a href=&quot;https://github.com/elasticsearch/logstash-forwarder&quot;&gt;logstash-forwarder&lt;/a&gt; which uses lumberjack (which supports and requires SSL key-management). Another simple alternative (but more cost-intensive), is to start a local logstash forwarder yourself:&lt;/p&gt;
&lt;pre class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;kw&quot;&gt;bin/logstash&lt;/span&gt; -e &lt;span class=&quot;st&quot;&gt;&amp;#39;input { syslog { port =&amp;gt; 11514 } } output { elasticsearch_http { host =&amp;gt; &amp;quot;syslog.domain.com&amp;quot; port =&amp;gt; 514 } }&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;log4j2&quot;&gt;Log4J2&lt;/h2&gt;
&lt;p&gt;Curiously, logback isn’t the only successor of Log4J. The initial version has now reached a “#2 version stamp”, which has been remodeled and offers a new API. Let’s try that: Add a few dependencies:&lt;/p&gt;
&lt;pre class=&quot;sourceCode scala&quot;&gt;&lt;code class=&quot;sourceCode scala&quot;&gt;libraryDependencies += &lt;span class=&quot;st&quot;&gt;&amp;quot;org.apache.logging.log4j&amp;quot;&lt;/span&gt; % &lt;span class=&quot;st&quot;&gt;&amp;quot;log4j-core&amp;quot;&lt;/span&gt; % &lt;span class=&quot;st&quot;&gt;&amp;quot;2.0.1&amp;quot;&lt;/span&gt;

libraryDependencies += &lt;span class=&quot;st&quot;&gt;&amp;quot;org.apache.logging.log4j&amp;quot;&lt;/span&gt; % &lt;span class=&quot;st&quot;&gt;&amp;quot;log4j-api&amp;quot;&lt;/span&gt; % &lt;span class=&quot;st&quot;&gt;&amp;quot;2.0.1&amp;quot;&lt;/span&gt;

libraryDependencies += &lt;span class=&quot;st&quot;&gt;&amp;quot;com.fasterxml.jackson.core&amp;quot;&lt;/span&gt; % &lt;span class=&quot;st&quot;&gt;&amp;quot;jackson-core&amp;quot;&lt;/span&gt; % &lt;span class=&quot;st&quot;&gt;&amp;quot;2.4.2&amp;quot;&lt;/span&gt;

libraryDependencies += &lt;span class=&quot;st&quot;&gt;&amp;quot;com.fasterxml.jackson.core&amp;quot;&lt;/span&gt; % &lt;span class=&quot;st&quot;&gt;&amp;quot;jackson-databind&amp;quot;&lt;/span&gt; % &lt;span class=&quot;st&quot;&gt;&amp;quot;2.4.2&amp;quot;&lt;/span&gt;

libraryDependencies += &lt;span class=&quot;st&quot;&gt;&amp;quot;com.fasterxml.jackson.core&amp;quot;&lt;/span&gt; % &lt;span class=&quot;st&quot;&gt;&amp;quot;jackson-annotations&amp;quot;&lt;/span&gt; % &lt;span class=&quot;st&quot;&gt;&amp;quot;2.4.2&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Replace the usage lines&lt;/p&gt;
&lt;pre class=&quot;sourceCode scala&quot;&gt;&lt;code class=&quot;sourceCode scala&quot;&gt;&lt;span class=&quot;kw&quot;&gt;import&lt;/span&gt; org.&lt;span class=&quot;fu&quot;&gt;apache&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;logging&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;log4j&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;LogManager&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;val&lt;/span&gt; Log = LogManager.&lt;span class=&quot;fu&quot;&gt;getLogger&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;getClass&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;getName&lt;/span&gt;)
Log.&lt;span class=&quot;fu&quot;&gt;info&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;Hello World&amp;quot;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And add a new configuration file to &lt;code&gt;src/main/resources/log4j2.xml&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;&lt;code class=&quot;sourceCode xml&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;?xml&lt;/span&gt; version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;&lt;span class=&quot;kw&quot;&gt;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;Configuration&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; status=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;DEBUG&amp;quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; packages=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;net.logstash.logging.log4j2.core.layout&amp;quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;Appenders&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;Socket&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;LogStashSocket&amp;quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; host=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;logstash.domain.com&amp;quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; port=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;9998&amp;quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; protocol=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;tcp&amp;quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;LogStashJSONLayout&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;/LogStashJSONLayout&amp;gt;&lt;/span&gt;       
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/Socket&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/Appenders&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;Loggers&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;Root&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; level=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;debug&amp;quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;AppenderRef&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; ref=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;LogStashSocket&amp;quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/Root&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/Loggers&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/Configuration&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That should work. But at the time of this writing, it too showed a few flaws. The same workaround as above applies.&lt;/p&gt;
&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;
&lt;p&gt;I can’t add a summary without a fat disclaimer: Most of the JARs used here are still a bit new and Logstash has experienced a few API updates recently. Older versions may work perfectly, but I unfortunately don’t have the time to find a perfect match. For the time being, a workaround will do.&lt;/p&gt;
&lt;p&gt;I found both logging frameworks equally enjoyable, although Log4J2 has a slight edge here thanks to its modularity. Performance considerations are not covered yet, but will be added in the future. Until then, enjoy your Scala log-stashing&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Document management and Git</title>
      <link>http://arlimus.github.io/articles/document.management.and.git/</link>
      <pubDate>Sun, 17  Aug 2014 02:00:00 +0200</pubDate>
      <guid isPermaLink="true">http://arlimus.github.io/articles/document.management.and.git/</guid>
      <author></author>
      <description>&lt;p&gt;“Where do you store your documentation?” When you get this question during a security audit, you better have an answer that is centralized, failure-resistant, backup-ready, fully versioned and (as a bonus) manipulation resistant.&lt;/p&gt;
&lt;p&gt;If you’re at a big company, you will find some shiny, ancient system, that handles these tasks. But if you’re at a startup, you usually neither care nor want such a behemoth.&lt;/p&gt;
&lt;p&gt;At &lt;a href=&quot;https://sessionbird.com&quot; target=&quot;_blank&quot;&gt;Sessionbird&lt;/a&gt;, we initially started pushing everything into OwnCloud. Recently, however, we moved our core documentation to Git.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&quot;what-is-markdown&quot;&gt;What is Markdown?&lt;/h2&gt;
&lt;p&gt;You can make a quick jump to git if you download all your old &lt;code&gt;doc&lt;/code&gt;, &lt;code&gt;odt&lt;/code&gt;, and what-not files, put them into a new folder, and run &lt;code&gt;git init&lt;/code&gt;. It’s possible, but in the long run, you will most likely accumulate so much binary data, that your repository will grow and become too large. Downloading 100+Mb to get to one important file is no fun. In this case, stick to conventional solutions (like OwnCloud in our case).&lt;/p&gt;
&lt;p&gt;We quickly decided to switch to markdown, in order to have a very simple syntax where people can focus more on “what they write” instead of “how it looks”.&lt;/p&gt;
&lt;p&gt;With this decision, we needed to recreate our documentation from the ground up. Surprisingly, it took less than a day to get it done, since most of our documents were “conversion-friendly”.&lt;/p&gt;
&lt;p&gt;Making everyone agree on markdown, on the other hand, wasn’t as easy as I had initially though. After all, not everyone at your business is necessarily a programmer.&lt;/p&gt;
&lt;h2 id=&quot;markdown-markdown&quot;&gt;Markdown != markdown&lt;/h2&gt;
&lt;p&gt;If you stick with the basics, markdown is great. If you start expanding - even slightly - it gets hairy. I have seen everything from LaTeX to JavaScript and HTML inside a simple &lt;code&gt;.md&lt;/code&gt; file. Which is fine, if you can all agree on how you’re handling your markdown.&lt;/p&gt;
&lt;p&gt;Whatever method you use to convert your files will dictate what you can and cannot do. It starts with how tables are formatted and ends with embedding TeX or HTML.&lt;/p&gt;
&lt;p&gt;In our case, we use &lt;a href=&quot;https://github.com/arlimus/any2pdf&quot;&gt;any2pdf&lt;/a&gt;, which is a small wrapper around &lt;a href=&quot;http://johnmacfarlane.net/pandoc/&quot;&gt;pandoc&lt;/a&gt; to get things done. We take the route via HTML because (1) we want our documents to be available in both HTML and PDF and look equally well and (2) it looks better at syntax highlighting and embedding.&lt;/p&gt;
&lt;p&gt;As an added bonus, our web-designers can help beautify our document templates. Thanks to docker, the whole process works on everybody’s laptop.&lt;/p&gt;
&lt;h2 id=&quot;metadata&quot;&gt;Metadata&lt;/h2&gt;
&lt;p&gt;If you use Pandoc, metadata is your friend. This is how a typical document starts:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;---
title: Document Title
author: Sessionbird GmbH, YOUR NAME
copyright: ...
---&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But that’s not all. During an audit, you will always be asked about how you manage your documentation versions. We were tired of maintaining a version indicator (and date) in each file and instead moved the task to the git repository.&lt;/p&gt;
&lt;p&gt;Whenever a document is created, you automatically add the latest tag, the commit-ID, and the last commit date to the titlepage. In the background, each markdown file is expanded to look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;---
title: Document Title
author: Sessionbird GmbH, NAME
copyright: ...
git_tag: v1.0
git_commit: abcdeff
git_date: 2014-08-17
---&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally there’s no more mistakes with incorrect dates or version stamps. There is also no lying: Whatever you have in git is what you get.&lt;/p&gt;
&lt;h2 id=&quot;advantages-of-git&quot;&gt;Advantages of Git&lt;/h2&gt;
&lt;p&gt;Which gets us back to the security audit. And this is where this solution on git really shines:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Q: &lt;strong&gt;Where do you keep your documents?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We have a centralized repository where all documents are located. It is highly available and secure, with every user having his/her own login.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Q: &lt;strong&gt;What if it fails?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;No problem, we run regular backups on all our repositories (which is increadible simple: &lt;code&gt;git clone&lt;/code&gt;). Additionally, many people have documentation repos on their machines, so even if the backup (and backup-backup) fails, you will find a common (sufficiently recent) state easily.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Q: &lt;strong&gt;How do you track changes?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Natural in git: All changes are tracked with owner and timestamp. Using markdown we also get nice changelogs as a bonus.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Q: &lt;strong&gt;What about manipulation?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If you want to add a commit into the repository, you have to have permissions to write to the repo. Not everyone can merge, so the damage is limited. Of those that can merge, we have a little step-by-step review before releasing a new version.&lt;/p&gt;
&lt;p&gt;If someone tries to change any old commit, he will have a hard time. Since commit-hashes are based on each other, any change to an old commit will automatically create new hashes for all subsequent commits. Something like this is always noticeable.&lt;/p&gt;
&lt;p&gt;It may not be perfect from a security standpoint, but it’s a great system nonetheless which works as advertised.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What we noticed the most, was the change in our documentation habits and workflow. We still tend to add a lot of schematics and illustrations, but we are much more focused on the content than we are on formatting everything. It also work on every device with only the bare minimum of knowledge required. Tools like Sublime, however, are a huge bonus, especially when it comes to auto-formatting tables.&lt;/p&gt;
&lt;p&gt;As for our workflow, we started to adopt a “write and review”-process, i.e. the “code and pull-request”-workflow many of us know and love. It certainly helped improve our quality and add new ideas.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Cloning Pitfalls</title>
      <link>http://arlimus.github.io/articles/cloning.pitfalls/</link>
      <pubDate>Sun, 10  Aug 2014 02:00:00 +0200</pubDate>
      <guid isPermaLink="true">http://arlimus.github.io/articles/cloning.pitfalls/</guid>
      <author></author>
      <description>&lt;p&gt;It’s a simple enough task: Create a copy of an object and hand it off for some jolly processing. But there’s a few traps on the way.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&quot;cloning-javascript&quot;&gt;Cloning (JavaScript)&lt;/h2&gt;
&lt;p&gt;Let’s try cloning with &lt;a href=&quot;http://lodash.com/docs&quot;&gt;lo-dash&lt;/a&gt;&lt;/p&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;a = {&lt;span class=&quot;dt&quot;&gt;b&lt;/span&gt;: {&lt;span class=&quot;dt&quot;&gt;c&lt;/span&gt;: &lt;span class=&quot;dv&quot;&gt;12&lt;/span&gt; }}
t = &lt;span class=&quot;ot&quot;&gt;_&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;clone&lt;/span&gt;(a)
&lt;span class=&quot;ot&quot;&gt;t&lt;/span&gt;.&lt;span class=&quot;ot&quot;&gt;b&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// = 13&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Simple.&lt;/p&gt;
&lt;p&gt;Generally, however, you won’t clone and just read a value; Instead you’ll most likely process it in some form:&lt;/p&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;ot&quot;&gt;t&lt;/span&gt;.&lt;span class=&quot;ot&quot;&gt;b&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;c&lt;/span&gt; = &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Imagine a larger project where things like this happen deep in a code-cave. It’s easy to think of the object as being fully cloned, even though it isn’t:&lt;/p&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;ot&quot;&gt;a&lt;/span&gt;.&lt;span class=&quot;ot&quot;&gt;b&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// = 3&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since javascript doesn’t have (verified) immutable types, this is a typical pitfall waiting for you.&lt;/p&gt;
&lt;p&gt;You’ll quickly find a solution to this problem:&lt;/p&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;a = {&lt;span class=&quot;dt&quot;&gt;b&lt;/span&gt;: {&lt;span class=&quot;dt&quot;&gt;c&lt;/span&gt;: &lt;span class=&quot;dv&quot;&gt;12&lt;/span&gt; }}
t = &lt;span class=&quot;ot&quot;&gt;_&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;cloneDeep&lt;/span&gt;(a)
&lt;span class=&quot;ot&quot;&gt;t&lt;/span&gt;.&lt;span class=&quot;ot&quot;&gt;b&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;c&lt;/span&gt; = &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;a&lt;/span&gt;.&lt;span class=&quot;ot&quot;&gt;b&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// = 12&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or using jQuery’s &lt;code&gt;extend&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;t = &lt;span class=&quot;ot&quot;&gt;$&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;extend&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;, {}, a)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or plain old JSON (if you don’t care about methods)&lt;/p&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;t = &lt;span class=&quot;ot&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;parse&lt;/span&gt;(&lt;span class=&quot;ot&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;stringify&lt;/span&gt;(a))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For more inspiration take a look at this &lt;a href=&quot;http://jsperf.com/deep-cloning-of-objects&quot;&gt;benchmark here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;pointers-go&quot;&gt;Pointers (Go)&lt;/h2&gt;
&lt;p&gt;The tricky part about javascript is, that this behavior isn’t always apparent. Other languages are much more explicit with copies and references.&lt;/p&gt;
&lt;p&gt;Here’s the same example in Go:&lt;/p&gt;
&lt;pre class=&quot;sourceCode go&quot;&gt;&lt;code class=&quot;sourceCode go&quot;&gt;&lt;span class=&quot;kw&quot;&gt;type&lt;/span&gt; B &lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; { C &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; }
&lt;span class=&quot;kw&quot;&gt;type&lt;/span&gt; A &lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; { B B }
a := A{B: B{C: &lt;span class=&quot;dv&quot;&gt;12&lt;/span&gt;}}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Versus:&lt;/p&gt;
&lt;pre class=&quot;sourceCode go&quot;&gt;&lt;code class=&quot;sourceCode go&quot;&gt;&lt;span class=&quot;kw&quot;&gt;type&lt;/span&gt; B &lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; { C &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; }
&lt;span class=&quot;kw&quot;&gt;type&lt;/span&gt; A &lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; { B *B }
a := A{B: &amp;amp;B{C: &lt;span class=&quot;dv&quot;&gt;12&lt;/span&gt;}}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This explicit pointer &lt;code&gt;*&lt;/code&gt; makes a huge difference in reasoning about the program. It clearly shows that it doesn’t hold the value itself, but a copy. It doesn’t necessarily make cloning the object any easier, but it simplifies the search for errors a lot: You know that it’s either a value &lt;code&gt;{ A Structure }&lt;/code&gt; (or a copy of such), or a pointer to some object &lt;code&gt;{ A *Structure }&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The larger your project gets, the more likely you’ll have these and similar constructs with potential cloning pits waiting (though less likely here).&lt;/p&gt;
&lt;h2 id=&quot;constants-scala&quot;&gt;Constants (Scala)&lt;/h2&gt;
&lt;p&gt;Go supports constants, but only in a very limited way:&lt;/p&gt;
&lt;pre class=&quot;sourceCode go&quot;&gt;&lt;code class=&quot;sourceCode go&quot;&gt;&lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; c = &lt;span class=&quot;dv&quot;&gt;123&lt;/span&gt;    &lt;span class=&quot;co&quot;&gt;// possible&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; a = A{...} &lt;span class=&quot;co&quot;&gt;// not&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s have a look at a final language for constants: Scala.&lt;/p&gt;
&lt;p&gt;Mutability is handled explicitly here:&lt;/p&gt;
&lt;pre class=&quot;sourceCode scala&quot;&gt;&lt;code class=&quot;sourceCode scala&quot;&gt;&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; a = &lt;span class=&quot;dv&quot;&gt;123&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// mutable&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;val&lt;/span&gt; b = &lt;span class=&quot;dv&quot;&gt;123&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// immutable&lt;/span&gt;
a = &lt;span class=&quot;dv&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// ok&lt;/span&gt;
b = &lt;span class=&quot;dv&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// won&amp;#39;t compile&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Even if you take more complex structures like maps and lists, you’ll usually have the choice of going mutable or immutable:&lt;/p&gt;
&lt;pre class=&quot;sourceCode scala&quot;&gt;&lt;code class=&quot;sourceCode scala&quot;&gt;&lt;span class=&quot;kw&quot;&gt;val&lt;/span&gt; a = List(&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;)
&lt;span class=&quot;fu&quot;&gt;a&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;) = &lt;span class=&quot;dv&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// won&amp;#39;t compile&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Versus&lt;/p&gt;
&lt;pre class=&quot;sourceCode scala&quot;&gt;&lt;code class=&quot;sourceCode scala&quot;&gt;&lt;span class=&quot;kw&quot;&gt;import&lt;/span&gt; collection.&lt;span class=&quot;fu&quot;&gt;mutable&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;LinkedList&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;val&lt;/span&gt; b = LinkedList(&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;)
&lt;span class=&quot;fu&quot;&gt;b&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;) = &lt;span class=&quot;dv&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// ok&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is much more explicit with regard to what can be changed and what can’t. Using Scala’s type system you get a lot of control over how users may use your custom objects.&lt;/p&gt;
&lt;h2 id=&quot;final-words&quot;&gt;Final words&lt;/h2&gt;
&lt;p&gt;In my opinion, opening up mutability in many situations gains a lot of simplicity and flexibility. Unless you’re around languages with more advanced language constructs like Scala or Haskell, you’ll often work with more mutable state than not (even if you don’t want to).&lt;/p&gt;
&lt;p&gt;Many functional languages will make immutable objects feel more accessible and usable and thus close some potential traps in your way. On the other hand, languages like Go will make you harness the full potential of you allocated memory bits, even though it requires some care in its handling.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>REST design summary</title>
      <link>http://arlimus.github.io/articles/restful.best.practices/</link>
      <pubDate>Sun, 03  Aug 2014 02:00:00 +0200</pubDate>
      <guid isPermaLink="true">http://arlimus.github.io/articles/restful.best.practices/</guid>
      <author></author>
      <description>&lt;p&gt;It feels like this has been done so many times, it could replace your favorite “Hello World” code. But since I’m a sucker for summaries, here goes.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;script&gt;
$app.directive('flow', function() {
  return {
    template: '\
&lt;div class=&quot;flow clearfix&quot;&gt;\
  &lt;div class=&quot;request&quot; ng-show=&quot;!!request&quot;&gt;\
    &lt;div class=&quot;rheader&quot;&gt;{{request}}&lt;/div&gt;\
    &lt;div class=&quot;rbody&quot;&gt;{{requestBody}}&lt;/div&gt;\
  &lt;/div&gt;\
  &lt;div class=&quot;connection&quot; ng-show=&quot;!!request&quot;&gt;&lt;/div&gt;\
  &lt;div class=&quot;response response-type-{{responseType}}&quot;&gt;\
    &lt;div class=&quot;rheader&quot;&gt;{{response}}&lt;/div&gt;\
    &lt;div class=&quot;rbody&quot;&gt;{{responseBody}}&lt;/div&gt;\
  &lt;/div&gt;\
  &lt;div class=&quot;help&quot; ng-show=&quot;!!help&quot;&gt;{{help}}&lt;/div&gt;\
&lt;/div&gt;\
',
    scope: {
      request: '@', requestBody: '@',
      response: '@', responseBody: '@',
      help: '@'
    },
    link: function (scope, element, attrs) {
      var r = (/^([2345])\d\d/).exec(scope.response)
      if(r == null){
        scope.responseType = &quot;0&quot;
      }else {
        scope.responseType = r[1]
      }
    }
  }
})
&lt;/script&gt;

&lt;h2 id=&quot;read&quot;&gt;Read&lt;/h2&gt;
&lt;p&gt;Get a list of items. If successful, it responds with an array of IDs or objects.&lt;/p&gt;
&lt;div flow=&quot;&quot; request=&quot;GET /items&quot; response=&quot;200 OK&quot; response-body=&quot;[&amp;quot;1&amp;quot;,&amp;quot;2&amp;quot;,&amp;quot;3&amp;quot;]&quot;&gt;

&lt;/div&gt;
&lt;div flow=&quot;&quot; request=&quot;GET /missing&quot; response=&quot;404 Not Found&quot;&gt;

&lt;/div&gt;
&lt;p&gt;Get a specific item. If successful, returns the object.&lt;/p&gt;
&lt;div flow=&quot;&quot; request=&quot;GET /items/1&quot; response=&quot;200 OK&quot; response-body=&quot;{&amp;quot;message&amp;quot;, &amp;quot;I am an item&amp;quot;}&quot;&gt;

&lt;/div&gt;
&lt;div flow=&quot;&quot; request=&quot;GET /items/?&quot; response=&quot;404 Not Found&quot;&gt;

&lt;/div&gt;
&lt;h2 id=&quot;create&quot;&gt;Create&lt;/h2&gt;
&lt;p&gt;If you want to create an new item (making sure it doesn’t exist):&lt;/p&gt;
&lt;div flow=&quot;&quot; request=&quot;POST /items&quot; request-body=&quot;{&amp;quot;id&amp;quot;: &amp;quot;4&amp;quot;, &amp;quot;key&amp;quot;: &amp;quot;val&amp;quot;}&quot; response=&quot;200 OK&quot;&gt;

&lt;/div&gt;
&lt;div flow=&quot;&quot; request=&quot;POST /items&quot; request-body=&quot;incorrect data body&quot; response=&quot;400 Bad Request&quot;&gt;

&lt;/div&gt;
&lt;p&gt;If the item already exists:&lt;/p&gt;
&lt;div flow=&quot;&quot; request=&quot;POST /items&quot; request-body=&quot;{&amp;quot;id&amp;quot;: &amp;quot;1&amp;quot;, &amp;quot;key&amp;quot;: &amp;quot;val&amp;quot;}&quot; response=&quot;409 Conflict&quot;&gt;

&lt;/div&gt;
&lt;h2 id=&quot;update&quot;&gt;Update&lt;/h2&gt;
&lt;p&gt;If you want to replace an existing item:&lt;/p&gt;
&lt;div flow=&quot;&quot; request=&quot;PUT /items/1&quot; request-body=&quot;{&amp;quot;message&amp;quot;: &amp;quot;hello&amp;quot;}&quot; response=&quot;200 OK&quot;&gt;

&lt;/div&gt;
&lt;div flow=&quot;&quot; request=&quot;PUT /items/1&quot; request-body=&quot;incorrect data body&quot; response=&quot;400 Bad Request&quot;&gt;

&lt;/div&gt;
&lt;div flow=&quot;&quot; request=&quot;PUT /items/4&quot; request-body=&quot;{&amp;quot;key&amp;quot;: &amp;quot;val&amp;quot;}&quot; response=&quot;404 Not Found&quot;&gt;

&lt;/div&gt;
&lt;h2 id=&quot;update-change-some-fields&quot;&gt;Update (change some fields)&lt;/h2&gt;
&lt;p&gt;If you want to update some fields of an existing item:&lt;/p&gt;
&lt;div flow=&quot;&quot; request=&quot;PATCH /items/1&quot; request-body=&quot;{&amp;quot;message&amp;quot;: &amp;quot;hello&amp;quot;}&quot; response=&quot;200 OK&quot;&gt;

&lt;/div&gt;
&lt;div flow=&quot;&quot; request=&quot;PATCH /items/1&quot; request-body=&quot;incorrect data body&quot; response=&quot;400 Bad Request&quot;&gt;

&lt;/div&gt;
&lt;div flow=&quot;&quot; request=&quot;PATCH /items/4&quot; request-body=&quot;{&amp;quot;message&amp;quot;: &amp;quot;hello&amp;quot;}&quot; response=&quot;404 Not Found&quot;&gt;

&lt;/div&gt;
&lt;h2 id=&quot;delete&quot;&gt;Delete&lt;/h2&gt;
&lt;p&gt;If you want to remove an existing item:&lt;/p&gt;
&lt;div flow=&quot;&quot; request=&quot;DELETE /items/1&quot; response=&quot;200 OK&quot;&gt;

&lt;/div&gt;
&lt;div flow=&quot;&quot; request=&quot;DELETE /items/4&quot; response=&quot;404 Not Found&quot;&gt;

&lt;/div&gt;
&lt;h2 id=&quot;other-responses&quot;&gt;Other responses&lt;/h2&gt;
&lt;div flow=&quot;&quot; response=&quot;401 Unauthorized&quot; help=&quot;Not authenticated; Please log in first&quot;&gt;

&lt;/div&gt;
&lt;div flow=&quot;&quot; response=&quot;403 Forbidden&quot; help=&quot;Not authorized; Get more permissions or leave&quot;&gt;

&lt;/div&gt;
&lt;div flow=&quot;&quot; response=&quot;500 Internal Server Error&quot; help=&quot;Something went wrong. Marbles dropped on the floor.&quot;&gt;

&lt;/div&gt;
&lt;h2 id=&quot;rarities&quot;&gt;Rarities&lt;/h2&gt;
&lt;div flow=&quot;&quot; response=&quot;402 Payment Required&quot; help=&quot;If someone is willing to pay for your endpoint&quot;&gt;

&lt;/div&gt;
&lt;div flow=&quot;&quot; response=&quot;418 I&amp;#39;m a teapot&quot; help=&quot;Obvious response if you&amp;#39;re teapot.&quot;&gt;

&lt;/div&gt;
&lt;div flow=&quot;&quot; response=&quot;501 Not Implemented&quot; help=&quot;Possible, but almost never seen in the wild. Stick to 404.&quot;&gt;

&lt;/div&gt;
&lt;div flow=&quot;&quot; response=&quot;503 Service Unavailable&quot; help=&quot;Try again later. Also seldomly seen in the wild.&quot;&gt;

&lt;/div&gt;
&lt;h2 id=&quot;final-words&quot;&gt;Final words&lt;/h2&gt;
&lt;p&gt;This will cover 80%+ of what you need in your daily REST work. Users will expect this behavior and will feel comfortable with it. It also helps design clean APIs.&lt;/p&gt;
&lt;p&gt;If you want a longer + more comprehensive list, go &lt;a href=&quot;http://www.restapitutorial.com&quot;&gt;here&lt;/a&gt; or &lt;a href=&quot;http://restpatterns.org&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>SSH and locked users</title>
      <link>http://arlimus.github.io/articles/usepam/</link>
      <pubDate>Mon, 28 Jul 2014 02:00:00 +0200</pubDate>
      <guid isPermaLink="true">http://arlimus.github.io/articles/usepam/</guid>
      <author></author>
      <description>&lt;p&gt;After the first release of &lt;a href=&quot;https://github.com/TelekomLabs/chef-ssh-hardening&quot;&gt;hardening for SSH&lt;/a&gt; I sometimes ran into the issue, where I suddenly couldn’t log into an account anymore. Since hardening prohibits the use of passwords, the culprit isn’t found immediately. The client’s SSH key was authorized and there wasn’t an obvious reason why he shouldn’t be able to login.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;A quick solutions that comes to mind after throwing this question at Google, is to set&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;UsePAM yes&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It works as advertised. But why?&lt;/p&gt;
&lt;p&gt;If you look at &lt;code&gt;man sshd_config&lt;/code&gt; it will tell you, that:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;UsePAM    Enables the Pluggable Authentication Module interface.
          If set to ``yes&amp;#39;&amp;#39; this will enable PAM authentication
          using ChallengeResponseAuthentication and
          PasswordAuthentication in addition to PAM account and
          session module processing for all authentication types.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Both of these authentication types are disabled by hardening, so &lt;code&gt;UsePAM&lt;/code&gt; should remain off by default.&lt;/p&gt;
&lt;p&gt;However, if you enable this setting, there is another implication that follows: By default the system will not allow entry to any “locked” user. Once &lt;code&gt;UsePAM&lt;/code&gt; is enabled, even locked users can enter.&lt;/p&gt;
&lt;p&gt;Initially this looks wrong. A locked user should not be “able to get into the system”, right?&lt;/p&gt;
&lt;p&gt;Not quite so. In &lt;code&gt;usermod&lt;/code&gt; or &lt;code&gt;passwd&lt;/code&gt; terms, user locking results in:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Lock a user&amp;#39;s password. This puts a &amp;#39;!&amp;#39; in front of the 
encrypted password, effectively disabling the password. &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In essence, it’s about disabling password-based login. So in your &lt;code&gt;/etc/shadow&lt;/code&gt;, you will see (for user &lt;code&gt;kano&lt;/code&gt;):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;kano:!:16199:0:99999:7:::&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;!&lt;/code&gt; in the password hash is something that cannot be reached with any password input, since the user’s input is always hashed. In terms of &lt;code&gt;usermod&lt;/code&gt; or &lt;code&gt;passwd&lt;/code&gt;, account locking is not about disabling the account, as the man-page shows further down:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Note: if you wish to lock the account (not only access
with a password), you should also set the EXPIRE_DATE to 1. &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This definition of locked accounts doesn’t make much sense in the context of SSH with key-based logins. The obvious solution of &lt;code&gt;UsePAM&lt;/code&gt; set to &lt;code&gt;yes&lt;/code&gt; has the nice byproduct of interpreting “locked accounts” as “doesn’t have a password” (which can be ignored for key-based logins) instead of “isn’t allowed to log in”.&lt;/p&gt;
&lt;p&gt;For those that want to remain compliant without involving PAM in SSH, there’s still a way to get users with impossible password-login without locking the account. Essentially, replace the &lt;code&gt;!&lt;/code&gt; in the password hash with any equivalent like &lt;code&gt;*&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;kano:*:16199:0:99999:7:::&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In normal login terms, this account is not locked, while making any password input fail. SSH in the default hardening configuration will allow users with keys to get in. This way may be longer, but it keeps a few settings at their intended purpose without aiming for a simple byproduct. Though if you prefer PAM, you still have the option of enabling it.&lt;/p&gt;
&lt;h3 id=&quot;configuring-accounts&quot;&gt;Configuring accounts&lt;/h3&gt;
&lt;p&gt;If you have &lt;code&gt;adduser&lt;/code&gt; installed, you gain control over this behavior when creating new users. This example demonstrates the difference:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; adduser --disabled-password kano

&amp;gt; grep kano /etc/shadow
kano:*:16280:7:60:7:::&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Versus:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; adduser --disabled-login kano

&amp;gt; grep kano /etc/shadow
kano:!:16280:7:60:7:::&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The former can log in without activating PAM in SSH, the latter can’t.&lt;/p&gt;
&lt;p&gt;A way to manage existing users is to use &lt;code&gt;usermod&lt;/code&gt; or &lt;code&gt;passwd&lt;/code&gt;. However, unlocking accounts that only have an &lt;code&gt;!&lt;/code&gt; in their hash field will result in an error:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; usermod -U kano
usermod: unlocking the user&amp;#39;s password would result in a passwordless account.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is annoying, but unfortunately correct: When locking an account, an &lt;code&gt;!&lt;/code&gt; is added in front of the password hash. Running unlock simply attempts to remove the &lt;code&gt;!&lt;/code&gt; and use the “old” password. Without a previous password, that doesn’t work.&lt;/p&gt;
&lt;p&gt;The alternative is to set an impossible password for the user:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; usermod -p &amp;quot;*&amp;quot; kano

&amp;gt; grep kano /etc/shadow
kano:*:16280:7:60:7:::&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will keep the user unlocked, while prohibiting password-based logins with &lt;code&gt;UsePAM no&lt;/code&gt;.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Gitlab 2.8 to 6.4</title>
      <link>http://arlimus.github.io/articles/gitlab.upgrade/</link>
      <pubDate>Fri, 10 Jan 2014 00:00:00 +0100</pubDate>
      <guid isPermaLink="true">http://arlimus.github.io/articles/gitlab.upgrade/</guid>
      <author></author>
      <description>&lt;p&gt;We’ve been happily running Gitlab for more than a year now, even though it was unmanaged and never upgraded. A few weeks ago I got my hands on it and decide to give upgrading a shot. “Can’t be that hard”. Fast-forward 3 weeks: I’m in the middle of an 1 hour automated upgrade procedure which is taking Gitlab from the stone age to the future.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;I’ll explain how we got there and what you should consider if you’re in a similar situation.&lt;/p&gt;
&lt;p&gt;First off: Gitlab was running on a physical machine productively which I couldn’t just take down or cause service downtimes. After all, it was Christmas, and that’s not something you want to find in a giftbox. All data had to be moved and I couldn’t clone the original system since it was running on bare metal.&lt;/p&gt;
&lt;h1 id=&quot;blind-copy&quot;&gt;Blind copy&lt;/h1&gt;
&lt;p&gt;I wanted to see if I could recreate Gitlab 2.8 with all of my old data on a new box. It’s certainly possible, but I soon realized it’s not as easy as it looks. Copying all files and migrating MySQL data wasn’t enough, as a persistent “500 Error” quickly told me. Since the goal isn’t necessarily to upgrade Gitlab itself but only to get all the data into a new Gitlab, I decided to go a different route.&lt;/p&gt;
&lt;h1 id=&quot;bootstrapping-gitlab-6.4&quot;&gt;Bootstrapping Gitlab 6.4&lt;/h1&gt;
&lt;p&gt;Instead of recreating Gitlab 2.8, I went for the version I wanted to end up with: Gitlab 6.4. I used &lt;a href=&quot;https://github.com/matschaffer/knife-solo&quot;&gt;knife-solo&lt;/a&gt; for deployment and the &lt;a href=&quot;https://github.com/ogom/cookbook-gitlab&quot;&gt;gitlab cookbook&lt;/a&gt;. Simply whip up a kitchen:&lt;/p&gt;
&lt;pre class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;kw&quot;&gt;knife&lt;/span&gt; solo init .&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and configure gitlab for the destination node. It’s well described in the &lt;a href=&quot;https://github.com/ogom/cookbook-gitlab/blob/master/README.md#usage&quot;&gt;readme&lt;/a&gt;. After all is done, deployment was easy:&lt;/p&gt;
&lt;pre class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;kw&quot;&gt;knife&lt;/span&gt; solo prepare git.mydomain.com
&lt;span class=&quot;kw&quot;&gt;knife&lt;/span&gt; solo cook git.mydomain.com --no-chef-check&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&quot;harsh-upgrade&quot;&gt;Harsh upgrade&lt;/h1&gt;
&lt;p&gt;So the ‘only’ issue was getting all data into shape. The brute-force way of doing this is taking all data, throwing it into Gitlab 6.4 and pressing the migrate button.&lt;/p&gt;
&lt;p&gt;Collecting old data was easy:&lt;/p&gt;
&lt;pre class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;co&quot;&gt;# get all mysql data&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;mysqldump&lt;/span&gt; -uUSER -pPASS gitlabhq_production &lt;span class=&quot;kw&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;gzip&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt; gitlab.sql-dump.gz

&lt;span class=&quot;co&quot;&gt;# get all repositories and keys&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;tar&lt;/span&gt; czf gitlab.repo-dump.tar.gz /home/git/repositories /home/git/.ssh/authorized_keys&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So was extracting it on the new machine:&lt;/p&gt;
&lt;pre class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;co&quot;&gt;# extract the repositories&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;cd&lt;/span&gt; /
&lt;span class=&quot;kw&quot;&gt;tar&lt;/span&gt; xf /root/gitlab.repo-dump.tar.gz

&lt;span class=&quot;co&quot;&gt;# inject the old db&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;# 1. create the structure in mysql&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;# 2. inject the data&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;create database gitlabhq_production;&amp;quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;mysql&lt;/span&gt; -u root -p&lt;span class=&quot;ot&quot;&gt;$MYSQL_PW&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;gunzip&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;lt;&lt;/span&gt; /root/gitlab.sql-dump.gz &lt;span class=&quot;kw&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;mysql&lt;/span&gt; -u root -p&lt;span class=&quot;ot&quot;&gt;$MYSQL_PW&lt;/span&gt; gitlabhq_production&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, how about about a DB migration?&lt;/p&gt;
&lt;pre class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;kw&quot;&gt;bundle&lt;/span&gt; exec rake db:migrate RAILS_ENV=production&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Errors, as expected. After straightening out some migration sections, the core ran through, but I was greeted with the familiar “500 Error” again.&lt;/p&gt;
&lt;h1 id=&quot;chain-of-fools&quot;&gt;Chain of fools&lt;/h1&gt;
&lt;p&gt;Remember the &lt;a href=&quot;http://www.youtube.com/watch?v=vPnehDhGa14&quot;&gt;chain of fools&lt;/a&gt;? Upgrading Windows from caveman to to the modern-age pain in the rear we know so well? Great stuff, let’s try that.&lt;/p&gt;
&lt;p&gt;Gitlab comes with &lt;a href=&quot;https://github.com/gitlabhq/gitlabhq/tree/master/doc/update&quot;&gt;great update instructions&lt;/a&gt;. Since we already have the latest version, we only have to worry about whatever transforms data and ignore everything that transforms Gitlab itself.&lt;/p&gt;
&lt;p&gt;The basic steps boil down to:&lt;/p&gt;
&lt;pre class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;kw&quot;&gt;git&lt;/span&gt; reset --hard HEAD
&lt;span class=&quot;kw&quot;&gt;git&lt;/span&gt; checkout -t origin/XXX-stable
&lt;span class=&quot;kw&quot;&gt;bundle&lt;/span&gt; install
&lt;span class=&quot;kw&quot;&gt;...&lt;/span&gt; do upgrade ...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After some cutting, the versions I ended up stepping through were: 3.1, 4.0, 4.1, 4.2, 5.0, 5.1, 5.4, 6.0, 6.2, and finally 6.4. It doesn’t just run through, however, it requries some work.&lt;/p&gt;
&lt;p&gt;The final script is found &lt;a href=&quot;https://gist.github.com/arlimus/8365108&quot;&gt;here&lt;/a&gt;. The adjustments required are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Older Gitlab versions need Ruby 1.9, newer need Ruby 2.0; Ruby must be adjusted during migration&lt;/li&gt;
&lt;li&gt;Gitlab 3.1 (and older) need a configuration file to run migrations; so mock one up on the fly&lt;/li&gt;
&lt;li&gt;Gitlab 6.0 transforms repos into a new structure; since we don’t have it running live, it will fail when trying to update the project. However, if we rescue this step, it will still correctly migrate files on the system. So a tiny patch is introduced to accomplish this.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Additionally, even after a successful migration, I still ended up with errors. As it turns out, we were already having database inconsistencies in our old gitlab after some users were deleted.&lt;/p&gt;
&lt;p&gt;So in addition to all these steps, I had to fix the database as well. First I had to upgrade projects whose user doesn’t exist anymore to have an owner:&lt;/p&gt;
&lt;pre class=&quot;mysql&quot;&gt;&lt;code&gt;# find all projects without a valid owner
select P.id from projects P left join users U on P.owner_id = U.id where U.id is null;

# set their owner to a valid id
update projects set owner_id = &amp;quot;1&amp;quot; where id = &amp;quot;...&amp;quot;;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Without this step these repos would not have been migrated into namespaces and thus would not have been available in new gitlab.&lt;/p&gt;
&lt;p&gt;Also, update all projects’ users to not include anyone who doesn’t exist anymore:&lt;/p&gt;
&lt;pre class=&quot;mysql&quot;&gt;&lt;code&gt;# find all users assigned to projects that don&amp;#39;t exist anymore
select P.id from users_projects P left join users U on P.user_id = U.id where U.id is null

# remove these users
delete from users_projects where id = &amp;quot;...&amp;quot;;&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&quot;results&quot;&gt;Results&lt;/h1&gt;
&lt;p&gt;The final script ran for 20min backup and 30min migration. It didn’t require and intervention. We found one more bug in the deployment keys after all was done, which required a quick manual fix. All in all, very successful! Thanks to everyone working on Gitlab for making this possible :)&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://gist.github.com/arlimus/8365108&quot;&gt;&lt;img id=&quot;gist-ribbon&quot; src=&quot;http://arlimus.github.io/css/gistbanner.png&quot; alt=&quot;Gist on GitHub&quot;&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Securing reverse SSH tunnels</title>
      <link>http://arlimus.github.io/articles/ssh.reverse.tunnel.security/</link>
      <pubDate>Tue, 05 Nov 2013 01:00:00 +0100</pubDate>
      <guid isPermaLink="true">http://arlimus.github.io/articles/ssh.reverse.tunnel.security/</guid>
      <author></author>
      <description>&lt;p&gt;SSH reverse tunnels are a quick way to expose client services on a server, if you want to control access to this service without additional firewall rules. In cloud scenarios it’s especially difficult to configure firewalls without reverting to DNS names, since IP addresses may change at any time. But there are some hidden traps when using reverse tunnels that you may not be aware of.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Let’s start with a simple usage example where one client wants to expose a local service to a server:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;client1&amp;gt; ssh -T -N -R 8001:localhost:80 server&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;http://arlimus.github.io/articles/ssh.reverse.tunnel.security/1.jpeg&quot; style=&quot;width: 100%; max-width: 1435px; margin-left: auto; margin-right: auto;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;As you can see, the server can now access the client’s service on port 8001.&lt;/p&gt;
&lt;p&gt;We used this trick for clients that have simple service APIs that only few servers should be able to reach. While we could have gone the route of configuring static IP addresses or overarching DNS names for all of these clients and securing it with firewall rules, we instead went with reverse tunnels. Now every client can control the access to his service, by creating a secure (and verified) connection to the server.&lt;/p&gt;
&lt;p&gt;Let’s add another client:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;client2&amp;gt; ssh -T -N -R 8002:localhost:80 server&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;http://arlimus.github.io/articles/ssh.reverse.tunnel.security/2.jpeg&quot; style=&quot;width: 100%; max-width: 1435px; margin-left: auto; margin-right: auto;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Now, let’s say that &lt;code&gt;client1&lt;/code&gt; belongs to one customer and &lt;code&gt;client2&lt;/code&gt; to another. What looks like directional pipes going from these clients to the central hub is by default actually a two-way road. That means, that without adjustments, you can potentially do this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;client2&amp;gt; ssh -T -N -L 81:localhost:8001 server&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;http://arlimus.github.io/articles/ssh.reverse.tunnel.security/3.jpeg&quot; style=&quot;width: 100%; max-width: 1435px; margin-left: auto; margin-right: auto;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;This may not be something you want, especially with backend systems. Many of these APIs aren’t hardened and offer a nice way to jump from one tenant or client to another, once you get an entry point. In a cloud scenario this is a disaster waiting to happen.&lt;/p&gt;
&lt;p&gt;Alas, there are a few ways to get around this issue.&lt;/p&gt;
&lt;p&gt;First, if you have OpenSSH at version &lt;a href=&quot;http://www.openssh.com/txt/release-6.2&quot;&gt;6.2&lt;/a&gt; or above you can add this configuration to your &lt;code&gt;sshd_config&lt;/code&gt; on the server:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;GatewayPorts no
AllowTcpForwarding remote&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This means that you can still create reverse tunnels to localhost, but forwarding tunnels can only be created to remote ports:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://arlimus.github.io/articles/ssh.reverse.tunnel.security/4.jpeg&quot; style=&quot;width: 100%; max-width: 1435px; margin-left: auto; margin-right: auto;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;If you want to play around with this configuration, have a look at this &lt;a href=&quot;https://gist.github.com/arlimus/7592670&quot;&gt;Vagrantfile&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Another option, which also works with older versions of OpenSSH, is to use whitelisting in the &lt;code&gt;.ssh/authorized_keys&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;permitopen=&amp;quot;255.255.255.255:9&amp;quot; ssh-rsa AAAAB3Nza.... user@client2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will prevent clients from opening forwarding ports to any address except the one specified. For clarification: &lt;code&gt;255.255.255.255&lt;/code&gt; is officially reserved for future use and &lt;a href=&quot;http://en.wikipedia.org/wiki/Discard_Protocol&quot;&gt;port 9&lt;/a&gt; is a fancy way of saying &lt;em&gt;“discard my input”&lt;/em&gt;. Kudos to Kurt Huwig for the whitelisting idea.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Wintersmith setup</title>
      <link>http://arlimus.github.io/articles/wintersmith.on.github/</link>
      <pubDate>Mon, 28 Oct 2013 01:00:00 +0100</pubDate>
      <guid isPermaLink="true">http://arlimus.github.io/articles/wintersmith.on.github/</guid>
      <author></author>
      <description>&lt;p&gt;There are some excellent tutorials for setting up Wintersmith out there. This is a summary for a quick and easy setup with Github Pages.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;
&lt;label&gt;Enter your GitHub username:&lt;/label&gt; &lt;input type=&quot;text&quot; ng-model=&quot;username&quot; placeholder=&quot;username&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Steps&lt;/strong&gt;&lt;/p&gt;
&lt;ol style=&quot;list-style-type: decimal&quot;&gt;
&lt;li&gt;&lt;p&gt;Create a GitHub repo for your user. As the name, type in: &lt;code&gt;{{username || 'username'}}.github.io&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Clone this repo to your local folder&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git clone git@github.com:{{username || 'username'}}/{{username || 'username'}}.github.io.git ~/blog
cd ~/blog&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Install wintersmith&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm install wintersmith -g&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Make sure GitHub doesn’t treat is as a Jekyll project and ignore node modules:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;touch .nojekyll
echo &amp;quot;node_modules&amp;quot; &amp;gt; .gitignore&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create your blog in folder &lt;code&gt;src/&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;wintersmith new src/
cd src/&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In this folder you will find the source of your blog. Edit the start of &lt;code&gt;config.json&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
  &amp;quot;output&amp;quot;: &amp;quot;./../&amp;quot;,
  &amp;quot;locals&amp;quot;: {
    &amp;quot;url&amp;quot;: &amp;quot;http://{{username || 'username'}}.github.io&amp;quot;,
    &amp;quot;name&amp;quot;: &amp;quot;Wintersmith meets {{username || 'username'}}&amp;quot;
    &amp;quot;owner&amp;quot;: &amp;quot;{{username || 'username'}}&amp;quot;
    &amp;quot;description&amp;quot;: &amp;quot;This is the blog of {{username || 'username'}}&amp;quot;
    //..&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Write articles, change templates, do whatever you like to it. To preview in &lt;a href=&quot;http://localhost:8080&quot;&gt;localhost:8080&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;wintersmith preview&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Once you are done, you can build it and push it online&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;wintersmith build

git add ../.
git commit -m &amp;quot;finished setup for first blog release&amp;quot;
git push -u origin master&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It may take GitHub a bit to update your page, but once it’s done you can visit it at &lt;a href=&quot;http://{{username || 'username'}}.github.io&quot;&gt;&lt;code&gt;http://{{username || 'username'}}.github.io&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>A kitchen for your server</title>
      <link>http://arlimus.github.io/articles/kitchen-server/</link>
      <pubDate>Sat, 26 Oct 2013 02:00:00 +0200</pubDate>
      <guid isPermaLink="true">http://arlimus.github.io/articles/kitchen-server/</guid>
      <author></author>
      <description>&lt;p&gt;I have a few bare servers lying around, pre-installed with Ubuntu, not integrated in any chef/puppte/saltstack workflow, with a lot of power ready to go. They are a perfect place for some labour-intensive vagrant boxes, which have recently been eating up my SSD. Due to the lack of bootstrap, I have found myself installing and configuring the same components one too many times.&lt;/p&gt;
&lt;p&gt;At this point I decided to revisit &lt;a href=&quot;https://github.com/matschaffer/knife-solo&quot;&gt;knife solo&lt;/a&gt; and take it out for a spin.&lt;span class=&quot;more&quot;&gt;&lt;/span&gt; The result is &lt;a href=&quot;https://github.com/arlimus/kitchen-server&quot;&gt;kitchen-server&lt;/a&gt;, an easy way to configure a server and make it your second home away from home.&lt;/p&gt;
&lt;p&gt;The only requirement to get started is &lt;a href=&quot;https://github.com/matschaffer/knife-solo&quot;&gt;knife-solo&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;kw&quot;&gt;gem&lt;/span&gt; install knife-solo&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s say my server is running at &lt;code&gt;192.168.200.204&lt;/code&gt;. I have the user &lt;code&gt;ubuntu&lt;/code&gt; preconfigured and ready to go (with ssh key on server). The basic setup is as easy as:&lt;/p&gt;
&lt;pre class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;kw&quot;&gt;git&lt;/span&gt; clone https://github.com/arlimus/kitchen-server
&lt;span class=&quot;kw&quot;&gt;cd&lt;/span&gt; kitchen-server

&lt;span class=&quot;kw&quot;&gt;./setup.sh&lt;/span&gt; ubuntu@192.168.200.204

&lt;span class=&quot;kw&quot;&gt;ssh&lt;/span&gt; knife@192.168.200.204&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I tend to use the extended version, to have zsh and git configured:&lt;/p&gt;
&lt;pre class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;kw&quot;&gt;./setup.sh&lt;/span&gt; ubuntu@192.168.200.204 ext

&lt;span class=&quot;kw&quot;&gt;ssh&lt;/span&gt; katana@192.168.200.204&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The kitchen itself is simply a configuration stack on top of many great cookbooks out there. The default configuration will get you started with vagrant quickly and easily. Feel free to fork and edit it as you like.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/arlimus/kitchen-server&quot;&gt;&lt;img id=&quot;fork-me-ribbon&quot; src=&quot;https://s3.amazonaws.com/github/ribbons/forkme_right_darkblue_121621.png&quot; alt=&quot;Fork me on GitHub&quot;&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Styling Jenkins</title>
      <link>http://arlimus.github.io/articles/theming.jenkins/</link>
      <pubDate>Thu, 24 Oct 2013 02:00:00 +0200</pubDate>
      <guid isPermaLink="true">http://arlimus.github.io/articles/theming.jenkins/</guid>
      <author></author>
      <description>&lt;p&gt;Jenkins has a nice theming plugin available. To use it you need to set up a stylesheet that is accessible to everyone user. I created a few themes found &lt;a href=&quot;https://github.com/arlimus/jenkins-style&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;The themes are found on github and hosted via github pages. They can easily be used in jenkins by copying the css of the theme you like into the configuration of the Simple Theme Plugin for Jenkins.&lt;/p&gt;
&lt;p&gt;My orange moon theme for Jenkins:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://arlimus.github.io/articles/theming.jenkins/orange.moon.jenkins.png&quot; style=&quot;max-width: 201px; margin-left: auto; margin-right: auto;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Link to the css:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;http://arlimus.github.io/jenkins-style/orange.moon.css&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The source is written in SASS and can be found &lt;a href=&quot;https://github.com/arlimus/jenkins-style/blob/master/css/orange.moon.scss&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I have also create a theme for my company’s Jenkins:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://arlimus.github.io/articles/theming.jenkins/magenta.jenkins.png&quot; style=&quot;max-width: 174px; margin-left: auto; margin-right: auto;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Link to the css:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;http://arlimus.github.io/jenkins-style/telekom.css&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The source is written in SASS and can be found &lt;a href=&quot;https://github.com/arlimus/jenkins-style/blob/master/css/telekom.scss&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/arlimus/jenkins-style&quot;&gt;&lt;img id=&quot;fork-me-ribbon&quot; src=&quot;https://s3.amazonaws.com/github/ribbons/forkme_right_darkblue_121621.png&quot; alt=&quot;Fork me on GitHub&quot;&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
  </channel>
</rss>